version: '3'

tasks:
  default:
    silent: true
    cmds:
      - echo $'To list all tasks run:\n\n\t task --list-all\n'
      - task --list --sort=none

  check:
    desc: Run all checks (used in CI)
    silent: true
    cmds:
      - task: lint
      - task: test
      - task: build

  clean:
    silent: true
    cmds:
      - rm -f glean
      - go clean
      - rm -rf dist/

  build:
    silent: true
    cmds:
      - go build -o glean

  test:
    silent: true
    cmds:
      - go test ./... -v

  lint:
    silent: true
    cmds:
      - golangci-lint run

  lint:fix:
    silent: true
    cmds:
      - golangci-lint run --fix

  install:
    desc: Install the CLI locally
    silent: true
    cmds:
      - go install

  release:
    desc: Create and push a new release
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
      FORCE: '{{.FORCE | default "false"}}'
    cmds:
      # Ensure we're on main and up to date
      - git checkout main
      - git pull origin main
      - git fetch --tags

      # Run checks
      - task: check

      # Show current version and commits since last release
      - echo "Current version is $(svu current)"
      - echo "Commits since last release:"
      - git log $(svu current)..HEAD --oneline

      # Get and validate the version, create and push tag
      - |
        # Set version
        if [ -n "{{.VERSION}}" ]; then
          version="{{.VERSION}}"
          # Validate version format (vX.Y.Z where X,Y,Z are numbers)
          if ! echo "$version" | grep -qE "^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$"; then
            echo "Error: Version must be in format vX.Y.Z where X,Y,Z are numbers (e.g. v1.2.3)"
            exit 1
          fi
          echo "Using specified version: $version"
        else
          version=$(svu next)
          echo "Next version will be $version"
        fi

        # Confirm before proceeding
        echo "Press Ctrl+C to cancel or wait 5 seconds to continue..."
        sleep 5

        # Handle existing tag if force is true
        if [ "{{.FORCE}}" = "true" ]; then
          if git rev-parse "$version" >/dev/null 2>&1; then
            echo "Force flag set. Removing existing tag $version"
            git tag -d "$version"
            git push origin ":refs/tags/$version"
          fi
        fi

        # Create and push the tag
        if [ "{{.FORCE}}" = "true" ]; then
          git tag -f -a "$version" -m "Release $version"
        else
          git tag -a "$version" -m "Release $version"
        fi
        git push origin "$version" --force

        # Instructions for monitoring
        echo "Release process started!"
        echo "Monitor the release at https://github.com/scalvert/glean-cli/actions"
    preconditions:
      - sh: "git diff-index --quiet HEAD"
        msg: "Working directory is not clean. Please commit or stash changes first."
      - sh: "command -v svu"
        msg: "svu is not installed. Run: go install github.com/caarlos0/svu@latest"
