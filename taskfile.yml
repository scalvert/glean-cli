version: "3"

tasks:
  default:
    desc: List all tasks
    silent: true
    cmds:
      - echo $'To list all tasks run:\n\n\t task --list-all\n'
      - task --list --sort=none

  setup:
    desc: Install required global Go dependencies
    silent: true
    cmds:
      - echo "Installing required Go dependencies..."
      - go install github.com/caarlos0/svu@latest
      - go install gotest.tools/gotestsum@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - |
        echo $'\nSetup complete! Installed:'
        echo "- svu (for versioning)"
        echo "- gotestsum (for test reporting)"
        echo "- golangci-lint (for linting)"

  clean:
    desc: Clean the build directory
    silent: true
    cmds:
      - rm -f glean
      - go clean
      - rm -rf dist/

  build:
    desc: Build the CLI
    silent: true
    cmds:
      - go build -o glean

  build:debug:
    desc: Build the CLI with debug symbols
    silent: true
    cmds:
      - go build -gcflags="all=-N -l" -o glean

  test:all:
    desc: Run all checks (used in CI)
    silent: true
    cmds:
      - task: lint
      - task: test:summary
      - task: build

  test:
    desc: Run Go tests
    silent: true
    cmds:
      - gotestsum

  test:summary:
    desc: Run Go tests with colorized output and a summary
    cmds:
      - gotestsum --format=short-verbose
    silent: false

  test:snapshot:
    desc: Run tests and update snapshots
    silent: true
    cmds:
      - echo "Running tests and updating snapshots..."
      - UPDATE_SNAPSHOTS=true go test ./... -v
      - |
        if [ $? -eq 0 ]; then
          echo "✓ Snapshots updated successfully"
        else
          echo "✗ Some tests failed. Please check the output above"
          exit 1
        fi

  lint:
    desc: Run Go lint
    silent: true
    cmds:
      - golangci-lint run

  lint:fix:
    desc: Run Go lint and fix
    silent: true
    cmds:
      - golangci-lint run --fix
      - fieldalignment -fix ./...

  install:
    desc: Install the CLI locally
    silent: true
    cmds:
      - go install

  release:
    desc: Create and push a new release
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
      FORCE: '{{.FORCE | default "false"}}'
    cmds:
      # Ensure we're on main and up to date
      - git checkout main
      - git pull origin main
      - git fetch --tags

      # Run all linters and tests
      - task: test:all

      # Show current version and commits since last release
      - echo "Current version is $(svu current)"
      - echo "Commits since last release:"
      - git log $(svu current)..HEAD --oneline

      # Get and validate the version, create and push tag
      - |
        # Set version
        if [ -n "{{.VERSION}}" ]; then
          version="{{.VERSION}}"
          # Validate version format (vX.Y.Z where X,Y,Z are numbers)
          if ! echo "$version" | grep -qE "^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$"; then
            echo "Error: Version must be in format vX.Y.Z where X,Y,Z are numbers (e.g. v1.2.3)"
            exit 1
          fi
          echo "Using specified version: $version"
        else
          version=$(svu next)
          echo "Next version will be $version"
        fi

        # Confirm before proceeding
        echo "Press Ctrl+C to cancel or wait 5 seconds to continue..."
        sleep 5

        # Handle existing tag if force is true
        if [ "{{.FORCE}}" = "true" ]; then
          if git rev-parse "$version" >/dev/null 2>&1; then
            echo "Force flag set. Removing existing tag $version"
            git tag -d "$version"
            git push origin ":refs/tags/$version"
          fi
        fi

        # Create and push the tag
        if [ "{{.FORCE}}" = "true" ]; then
          git tag -f -a "$version" -m "Release $version"
        else
          git tag -a "$version" -m "Release $version"
        fi
        git push origin "$version" --force

        # Instructions for monitoring
        echo "Release process started!"
        echo "Monitor the release at https://github.com/scalvert/glean-cli/actions"
    preconditions:
      - sh: "git diff-index --quiet HEAD"
        msg: "Working directory is not clean. Please commit or stash changes first."
      - sh: "command -v svu"
        msg: "svu is not installed. Run: go install github.com/caarlos0/svu@latest"

  demo:
    desc: Generate demo GIF for README
    deps: [build]
    silent: true
    cmds:
      - echo "Generating demo GIF using VHS..."
      - vhs demo/glean.tape
      - echo "Demo GIF generated at demo/readme.gif"
