/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the TeamsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamsResponse{}

// TeamsResponse struct for TeamsResponse
type TeamsResponse struct {
	// A Team and a deep copy of all its members for each ID in the request
	Results []Team `json:"results,omitempty"`
	// A list of IDs that could not be found.
	Errors []string `json:"errors,omitempty"`
}

// NewTeamsResponse instantiates a new TeamsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsResponse() *TeamsResponse {
	this := TeamsResponse{}
	return &this
}

// NewTeamsResponseWithDefaults instantiates a new TeamsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsResponseWithDefaults() *TeamsResponse {
	this := TeamsResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *TeamsResponse) GetResults() []Team {
	if o == nil || IsNil(o.Results) {
		var ret []Team
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsResponse) GetResultsOk() ([]Team, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *TeamsResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Team and assigns it to the Results field.
func (o *TeamsResponse) SetResults(v []Team) {
	o.Results = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *TeamsResponse) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsResponse) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *TeamsResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *TeamsResponse) SetErrors(v []string) {
	o.Errors = v
}

func (o TeamsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableTeamsResponse struct {
	value *TeamsResponse
	isSet bool
}

func (v NullableTeamsResponse) Get() *TeamsResponse {
	return v.value
}

func (v *NullableTeamsResponse) Set(val *TeamsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsResponse(val *TeamsResponse) *NullableTeamsResponse {
	return &NullableTeamsResponse{value: val, isSet: true}
}

func (v NullableTeamsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


