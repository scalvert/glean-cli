/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AskRequest{}

// AskRequest struct for AskRequest
type AskRequest struct {
	// Whether to apply only question detection and not answering.
	DetectOnly *bool `json:"detectOnly,omitempty"`
	AskExperimentalMetadata *AskExperimentalMetadata `json:"AskExperimentalMetadata,omitempty"`
	SearchRequest SearchRequest `json:"searchRequest"`
	// A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
	ExcludedDocumentSpecs []DocumentSpec `json:"excludedDocumentSpecs,omitempty"`
	// Search operators to append to the query
	Operators *string `json:"operators,omitempty"`
	// Which backend to use to fulfill the requests.
	Backend *string `json:"backend,omitempty"`
	// The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
	ChatApplicationId *string `json:"chatApplicationId,omitempty"`
}

type _AskRequest AskRequest

// NewAskRequest instantiates a new AskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAskRequest(searchRequest SearchRequest) *AskRequest {
	this := AskRequest{}
	this.SearchRequest = searchRequest
	return &this
}

// NewAskRequestWithDefaults instantiates a new AskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAskRequestWithDefaults() *AskRequest {
	this := AskRequest{}
	return &this
}

// GetDetectOnly returns the DetectOnly field value if set, zero value otherwise.
func (o *AskRequest) GetDetectOnly() bool {
	if o == nil || IsNil(o.DetectOnly) {
		var ret bool
		return ret
	}
	return *o.DetectOnly
}

// GetDetectOnlyOk returns a tuple with the DetectOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetDetectOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.DetectOnly) {
		return nil, false
	}
	return o.DetectOnly, true
}

// HasDetectOnly returns a boolean if a field has been set.
func (o *AskRequest) HasDetectOnly() bool {
	if o != nil && !IsNil(o.DetectOnly) {
		return true
	}

	return false
}

// SetDetectOnly gets a reference to the given bool and assigns it to the DetectOnly field.
func (o *AskRequest) SetDetectOnly(v bool) {
	o.DetectOnly = &v
}

// GetAskExperimentalMetadata returns the AskExperimentalMetadata field value if set, zero value otherwise.
func (o *AskRequest) GetAskExperimentalMetadata() AskExperimentalMetadata {
	if o == nil || IsNil(o.AskExperimentalMetadata) {
		var ret AskExperimentalMetadata
		return ret
	}
	return *o.AskExperimentalMetadata
}

// GetAskExperimentalMetadataOk returns a tuple with the AskExperimentalMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetAskExperimentalMetadataOk() (*AskExperimentalMetadata, bool) {
	if o == nil || IsNil(o.AskExperimentalMetadata) {
		return nil, false
	}
	return o.AskExperimentalMetadata, true
}

// HasAskExperimentalMetadata returns a boolean if a field has been set.
func (o *AskRequest) HasAskExperimentalMetadata() bool {
	if o != nil && !IsNil(o.AskExperimentalMetadata) {
		return true
	}

	return false
}

// SetAskExperimentalMetadata gets a reference to the given AskExperimentalMetadata and assigns it to the AskExperimentalMetadata field.
func (o *AskRequest) SetAskExperimentalMetadata(v AskExperimentalMetadata) {
	o.AskExperimentalMetadata = &v
}

// GetSearchRequest returns the SearchRequest field value
func (o *AskRequest) GetSearchRequest() SearchRequest {
	if o == nil {
		var ret SearchRequest
		return ret
	}

	return o.SearchRequest
}

// GetSearchRequestOk returns a tuple with the SearchRequest field value
// and a boolean to check if the value has been set.
func (o *AskRequest) GetSearchRequestOk() (*SearchRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchRequest, true
}

// SetSearchRequest sets field value
func (o *AskRequest) SetSearchRequest(v SearchRequest) {
	o.SearchRequest = v
}

// GetExcludedDocumentSpecs returns the ExcludedDocumentSpecs field value if set, zero value otherwise.
func (o *AskRequest) GetExcludedDocumentSpecs() []DocumentSpec {
	if o == nil || IsNil(o.ExcludedDocumentSpecs) {
		var ret []DocumentSpec
		return ret
	}
	return o.ExcludedDocumentSpecs
}

// GetExcludedDocumentSpecsOk returns a tuple with the ExcludedDocumentSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetExcludedDocumentSpecsOk() ([]DocumentSpec, bool) {
	if o == nil || IsNil(o.ExcludedDocumentSpecs) {
		return nil, false
	}
	return o.ExcludedDocumentSpecs, true
}

// HasExcludedDocumentSpecs returns a boolean if a field has been set.
func (o *AskRequest) HasExcludedDocumentSpecs() bool {
	if o != nil && !IsNil(o.ExcludedDocumentSpecs) {
		return true
	}

	return false
}

// SetExcludedDocumentSpecs gets a reference to the given []DocumentSpec and assigns it to the ExcludedDocumentSpecs field.
func (o *AskRequest) SetExcludedDocumentSpecs(v []DocumentSpec) {
	o.ExcludedDocumentSpecs = v
}

// GetOperators returns the Operators field value if set, zero value otherwise.
func (o *AskRequest) GetOperators() string {
	if o == nil || IsNil(o.Operators) {
		var ret string
		return ret
	}
	return *o.Operators
}

// GetOperatorsOk returns a tuple with the Operators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetOperatorsOk() (*string, bool) {
	if o == nil || IsNil(o.Operators) {
		return nil, false
	}
	return o.Operators, true
}

// HasOperators returns a boolean if a field has been set.
func (o *AskRequest) HasOperators() bool {
	if o != nil && !IsNil(o.Operators) {
		return true
	}

	return false
}

// SetOperators gets a reference to the given string and assigns it to the Operators field.
func (o *AskRequest) SetOperators(v string) {
	o.Operators = &v
}

// GetBackend returns the Backend field value if set, zero value otherwise.
func (o *AskRequest) GetBackend() string {
	if o == nil || IsNil(o.Backend) {
		var ret string
		return ret
	}
	return *o.Backend
}

// GetBackendOk returns a tuple with the Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetBackendOk() (*string, bool) {
	if o == nil || IsNil(o.Backend) {
		return nil, false
	}
	return o.Backend, true
}

// HasBackend returns a boolean if a field has been set.
func (o *AskRequest) HasBackend() bool {
	if o != nil && !IsNil(o.Backend) {
		return true
	}

	return false
}

// SetBackend gets a reference to the given string and assigns it to the Backend field.
func (o *AskRequest) SetBackend(v string) {
	o.Backend = &v
}

// GetChatApplicationId returns the ChatApplicationId field value if set, zero value otherwise.
func (o *AskRequest) GetChatApplicationId() string {
	if o == nil || IsNil(o.ChatApplicationId) {
		var ret string
		return ret
	}
	return *o.ChatApplicationId
}

// GetChatApplicationIdOk returns a tuple with the ChatApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetChatApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChatApplicationId) {
		return nil, false
	}
	return o.ChatApplicationId, true
}

// HasChatApplicationId returns a boolean if a field has been set.
func (o *AskRequest) HasChatApplicationId() bool {
	if o != nil && !IsNil(o.ChatApplicationId) {
		return true
	}

	return false
}

// SetChatApplicationId gets a reference to the given string and assigns it to the ChatApplicationId field.
func (o *AskRequest) SetChatApplicationId(v string) {
	o.ChatApplicationId = &v
}

func (o AskRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetectOnly) {
		toSerialize["detectOnly"] = o.DetectOnly
	}
	if !IsNil(o.AskExperimentalMetadata) {
		toSerialize["AskExperimentalMetadata"] = o.AskExperimentalMetadata
	}
	toSerialize["searchRequest"] = o.SearchRequest
	if !IsNil(o.ExcludedDocumentSpecs) {
		toSerialize["excludedDocumentSpecs"] = o.ExcludedDocumentSpecs
	}
	if !IsNil(o.Operators) {
		toSerialize["operators"] = o.Operators
	}
	if !IsNil(o.Backend) {
		toSerialize["backend"] = o.Backend
	}
	if !IsNil(o.ChatApplicationId) {
		toSerialize["chatApplicationId"] = o.ChatApplicationId
	}
	return toSerialize, nil
}

func (o *AskRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"searchRequest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAskRequest := _AskRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAskRequest)

	if err != nil {
		return err
	}

	*o = AskRequest(varAskRequest)

	return err
}

type NullableAskRequest struct {
	value *AskRequest
	isSet bool
}

func (v NullableAskRequest) Get() *AskRequest {
	return v.value
}

func (v *NullableAskRequest) Set(val *AskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAskRequest(val *AskRequest) *NullableAskRequest {
	return &NullableAskRequest{value: val, isSet: true}
}

func (v NullableAskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


