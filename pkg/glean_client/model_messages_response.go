/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessagesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagesResponse{}

// MessagesResponse struct for MessagesResponse
type MessagesResponse struct {
	// Whether there are more results for client to continue requesting.
	HasMore bool `json:"hasMore"`
	SearchResponse *SearchResponse `json:"searchResponse,omitempty"`
	RootMessage *SearchResult `json:"rootMessage,omitempty"`
}

type _MessagesResponse MessagesResponse

// NewMessagesResponse instantiates a new MessagesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagesResponse(hasMore bool) *MessagesResponse {
	this := MessagesResponse{}
	this.HasMore = hasMore
	return &this
}

// NewMessagesResponseWithDefaults instantiates a new MessagesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagesResponseWithDefaults() *MessagesResponse {
	this := MessagesResponse{}
	return &this
}

// GetHasMore returns the HasMore field value
func (o *MessagesResponse) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *MessagesResponse) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *MessagesResponse) SetHasMore(v bool) {
	o.HasMore = v
}

// GetSearchResponse returns the SearchResponse field value if set, zero value otherwise.
func (o *MessagesResponse) GetSearchResponse() SearchResponse {
	if o == nil || IsNil(o.SearchResponse) {
		var ret SearchResponse
		return ret
	}
	return *o.SearchResponse
}

// GetSearchResponseOk returns a tuple with the SearchResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesResponse) GetSearchResponseOk() (*SearchResponse, bool) {
	if o == nil || IsNil(o.SearchResponse) {
		return nil, false
	}
	return o.SearchResponse, true
}

// HasSearchResponse returns a boolean if a field has been set.
func (o *MessagesResponse) HasSearchResponse() bool {
	if o != nil && !IsNil(o.SearchResponse) {
		return true
	}

	return false
}

// SetSearchResponse gets a reference to the given SearchResponse and assigns it to the SearchResponse field.
func (o *MessagesResponse) SetSearchResponse(v SearchResponse) {
	o.SearchResponse = &v
}

// GetRootMessage returns the RootMessage field value if set, zero value otherwise.
func (o *MessagesResponse) GetRootMessage() SearchResult {
	if o == nil || IsNil(o.RootMessage) {
		var ret SearchResult
		return ret
	}
	return *o.RootMessage
}

// GetRootMessageOk returns a tuple with the RootMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagesResponse) GetRootMessageOk() (*SearchResult, bool) {
	if o == nil || IsNil(o.RootMessage) {
		return nil, false
	}
	return o.RootMessage, true
}

// HasRootMessage returns a boolean if a field has been set.
func (o *MessagesResponse) HasRootMessage() bool {
	if o != nil && !IsNil(o.RootMessage) {
		return true
	}

	return false
}

// SetRootMessage gets a reference to the given SearchResult and assigns it to the RootMessage field.
func (o *MessagesResponse) SetRootMessage(v SearchResult) {
	o.RootMessage = &v
}

func (o MessagesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hasMore"] = o.HasMore
	if !IsNil(o.SearchResponse) {
		toSerialize["searchResponse"] = o.SearchResponse
	}
	if !IsNil(o.RootMessage) {
		toSerialize["rootMessage"] = o.RootMessage
	}
	return toSerialize, nil
}

func (o *MessagesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hasMore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessagesResponse := _MessagesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessagesResponse)

	if err != nil {
		return err
	}

	*o = MessagesResponse(varMessagesResponse)

	return err
}

type NullableMessagesResponse struct {
	value *MessagesResponse
	isSet bool
}

func (v NullableMessagesResponse) Get() *MessagesResponse {
	return v.value
}

func (v *NullableMessagesResponse) Set(val *MessagesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagesResponse(val *MessagesResponse) *NullableMessagesResponse {
	return &NullableMessagesResponse{value: val, isSet: true}
}

func (v NullableMessagesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


