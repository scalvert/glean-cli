/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the Permissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Permissions{}

// Permissions Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles. When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
type Permissions struct {
	// TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
	CanAdminSearch *bool `json:"canAdminSearch,omitempty"`
	// TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
	CanAdminClientApiGlobalTokens *bool `json:"canAdminClientApiGlobalTokens,omitempty"`
	// TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
	CanDlp *bool `json:"canDlp,omitempty"`
	// Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
	Read *map[string][]ReadPermission `json:"read,omitempty"`
	// Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
	Write *map[string][]WritePermission `json:"write,omitempty"`
	// Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
	Grant *map[string][]GrantPermission `json:"grant,omitempty"`
	// The roleId of the canonical role a user has. The displayName is equal to the roleId.
	Role *string `json:"role,omitempty"`
	// The roleIds of the roles a user has.
	Roles []string `json:"roles,omitempty"`
}

// NewPermissions instantiates a new Permissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissions() *Permissions {
	this := Permissions{}
	return &this
}

// NewPermissionsWithDefaults instantiates a new Permissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsWithDefaults() *Permissions {
	this := Permissions{}
	return &this
}

// GetCanAdminSearch returns the CanAdminSearch field value if set, zero value otherwise.
func (o *Permissions) GetCanAdminSearch() bool {
	if o == nil || IsNil(o.CanAdminSearch) {
		var ret bool
		return ret
	}
	return *o.CanAdminSearch
}

// GetCanAdminSearchOk returns a tuple with the CanAdminSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetCanAdminSearchOk() (*bool, bool) {
	if o == nil || IsNil(o.CanAdminSearch) {
		return nil, false
	}
	return o.CanAdminSearch, true
}

// HasCanAdminSearch returns a boolean if a field has been set.
func (o *Permissions) HasCanAdminSearch() bool {
	if o != nil && !IsNil(o.CanAdminSearch) {
		return true
	}

	return false
}

// SetCanAdminSearch gets a reference to the given bool and assigns it to the CanAdminSearch field.
func (o *Permissions) SetCanAdminSearch(v bool) {
	o.CanAdminSearch = &v
}

// GetCanAdminClientApiGlobalTokens returns the CanAdminClientApiGlobalTokens field value if set, zero value otherwise.
func (o *Permissions) GetCanAdminClientApiGlobalTokens() bool {
	if o == nil || IsNil(o.CanAdminClientApiGlobalTokens) {
		var ret bool
		return ret
	}
	return *o.CanAdminClientApiGlobalTokens
}

// GetCanAdminClientApiGlobalTokensOk returns a tuple with the CanAdminClientApiGlobalTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetCanAdminClientApiGlobalTokensOk() (*bool, bool) {
	if o == nil || IsNil(o.CanAdminClientApiGlobalTokens) {
		return nil, false
	}
	return o.CanAdminClientApiGlobalTokens, true
}

// HasCanAdminClientApiGlobalTokens returns a boolean if a field has been set.
func (o *Permissions) HasCanAdminClientApiGlobalTokens() bool {
	if o != nil && !IsNil(o.CanAdminClientApiGlobalTokens) {
		return true
	}

	return false
}

// SetCanAdminClientApiGlobalTokens gets a reference to the given bool and assigns it to the CanAdminClientApiGlobalTokens field.
func (o *Permissions) SetCanAdminClientApiGlobalTokens(v bool) {
	o.CanAdminClientApiGlobalTokens = &v
}

// GetCanDlp returns the CanDlp field value if set, zero value otherwise.
func (o *Permissions) GetCanDlp() bool {
	if o == nil || IsNil(o.CanDlp) {
		var ret bool
		return ret
	}
	return *o.CanDlp
}

// GetCanDlpOk returns a tuple with the CanDlp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetCanDlpOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDlp) {
		return nil, false
	}
	return o.CanDlp, true
}

// HasCanDlp returns a boolean if a field has been set.
func (o *Permissions) HasCanDlp() bool {
	if o != nil && !IsNil(o.CanDlp) {
		return true
	}

	return false
}

// SetCanDlp gets a reference to the given bool and assigns it to the CanDlp field.
func (o *Permissions) SetCanDlp(v bool) {
	o.CanDlp = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *Permissions) GetRead() map[string][]ReadPermission {
	if o == nil || IsNil(o.Read) {
		var ret map[string][]ReadPermission
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetReadOk() (*map[string][]ReadPermission, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *Permissions) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given map[string][]ReadPermission and assigns it to the Read field.
func (o *Permissions) SetRead(v map[string][]ReadPermission) {
	o.Read = &v
}

// GetWrite returns the Write field value if set, zero value otherwise.
func (o *Permissions) GetWrite() map[string][]WritePermission {
	if o == nil || IsNil(o.Write) {
		var ret map[string][]WritePermission
		return ret
	}
	return *o.Write
}

// GetWriteOk returns a tuple with the Write field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetWriteOk() (*map[string][]WritePermission, bool) {
	if o == nil || IsNil(o.Write) {
		return nil, false
	}
	return o.Write, true
}

// HasWrite returns a boolean if a field has been set.
func (o *Permissions) HasWrite() bool {
	if o != nil && !IsNil(o.Write) {
		return true
	}

	return false
}

// SetWrite gets a reference to the given map[string][]WritePermission and assigns it to the Write field.
func (o *Permissions) SetWrite(v map[string][]WritePermission) {
	o.Write = &v
}

// GetGrant returns the Grant field value if set, zero value otherwise.
func (o *Permissions) GetGrant() map[string][]GrantPermission {
	if o == nil || IsNil(o.Grant) {
		var ret map[string][]GrantPermission
		return ret
	}
	return *o.Grant
}

// GetGrantOk returns a tuple with the Grant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetGrantOk() (*map[string][]GrantPermission, bool) {
	if o == nil || IsNil(o.Grant) {
		return nil, false
	}
	return o.Grant, true
}

// HasGrant returns a boolean if a field has been set.
func (o *Permissions) HasGrant() bool {
	if o != nil && !IsNil(o.Grant) {
		return true
	}

	return false
}

// SetGrant gets a reference to the given map[string][]GrantPermission and assigns it to the Grant field.
func (o *Permissions) SetGrant(v map[string][]GrantPermission) {
	o.Grant = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *Permissions) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *Permissions) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *Permissions) SetRole(v string) {
	o.Role = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Permissions) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permissions) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Permissions) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *Permissions) SetRoles(v []string) {
	o.Roles = v
}

func (o Permissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Permissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanAdminSearch) {
		toSerialize["canAdminSearch"] = o.CanAdminSearch
	}
	if !IsNil(o.CanAdminClientApiGlobalTokens) {
		toSerialize["canAdminClientApiGlobalTokens"] = o.CanAdminClientApiGlobalTokens
	}
	if !IsNil(o.CanDlp) {
		toSerialize["canDlp"] = o.CanDlp
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Write) {
		toSerialize["write"] = o.Write
	}
	if !IsNil(o.Grant) {
		toSerialize["grant"] = o.Grant
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullablePermissions struct {
	value *Permissions
	isSet bool
}

func (v NullablePermissions) Get() *Permissions {
	return v.value
}

func (v *NullablePermissions) Set(val *Permissions) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissions(val *Permissions) *NullablePermissions {
	return &NullablePermissions{value: val, isSet: true}
}

func (v NullablePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


