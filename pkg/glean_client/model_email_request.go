/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailRequest{}

// EmailRequest A request to send email[s] to the specified users
type EmailRequest struct {
	EmailTemplate CommunicationTemplate `json:"emailTemplate"`
	AlertData *AlertData `json:"alertData,omitempty"`
	// The people to send emails to
	Recipients []Person `json:"recipients,omitempty"`
	RecipientFilters *PeopleFilters `json:"recipientFilters,omitempty"`
	// Name of the company.
	CompanyName *string `json:"companyName,omitempty"`
	// The instance ID of the datasource (if any)
	DatasourceInstance *string `json:"datasourceInstance,omitempty"`
	// The people who triggered this email
	Senders []Person `json:"senders,omitempty"`
	// The URL of the client triggering the request, as received in the ClientConfig
	WebAppUrl *string `json:"webAppUrl,omitempty"`
	// The URL of the QE instance the email request is processed by.
	ServerUrl *string `json:"serverUrl,omitempty"`
	// The URL to unsubscribe from emails.
	UnsubscribeUrl *string `json:"unsubscribeUrl,omitempty"`
	// The documents this email request refers to
	Documents []Document `json:"documents,omitempty"`
	// Reasons this email request was sent. Will be shown directly to end user.
	Reasons []string `json:"reasons,omitempty"`
	// For building complex email UIs, we use a block structure that dictates what we create in the UI
	Blocks *map[string][]map[string]interface{} `json:"blocks,omitempty"`
	// Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to {{subject}}
	Subjects *map[string]string `json:"subjects,omitempty"`
	FeedbackPayload *EmailRequestFeedbackPayload `json:"feedbackPayload,omitempty"`
	ChatFeedbackPayload *EmailRequestChatFeedbackPayload `json:"chatFeedbackPayload,omitempty"`
}

type _EmailRequest EmailRequest

// NewEmailRequest instantiates a new EmailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRequest(emailTemplate CommunicationTemplate) *EmailRequest {
	this := EmailRequest{}
	this.EmailTemplate = emailTemplate
	return &this
}

// NewEmailRequestWithDefaults instantiates a new EmailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRequestWithDefaults() *EmailRequest {
	this := EmailRequest{}
	return &this
}

// GetEmailTemplate returns the EmailTemplate field value
func (o *EmailRequest) GetEmailTemplate() CommunicationTemplate {
	if o == nil {
		var ret CommunicationTemplate
		return ret
	}

	return o.EmailTemplate
}

// GetEmailTemplateOk returns a tuple with the EmailTemplate field value
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetEmailTemplateOk() (*CommunicationTemplate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailTemplate, true
}

// SetEmailTemplate sets field value
func (o *EmailRequest) SetEmailTemplate(v CommunicationTemplate) {
	o.EmailTemplate = v
}

// GetAlertData returns the AlertData field value if set, zero value otherwise.
func (o *EmailRequest) GetAlertData() AlertData {
	if o == nil || IsNil(o.AlertData) {
		var ret AlertData
		return ret
	}
	return *o.AlertData
}

// GetAlertDataOk returns a tuple with the AlertData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetAlertDataOk() (*AlertData, bool) {
	if o == nil || IsNil(o.AlertData) {
		return nil, false
	}
	return o.AlertData, true
}

// HasAlertData returns a boolean if a field has been set.
func (o *EmailRequest) HasAlertData() bool {
	if o != nil && !IsNil(o.AlertData) {
		return true
	}

	return false
}

// SetAlertData gets a reference to the given AlertData and assigns it to the AlertData field.
func (o *EmailRequest) SetAlertData(v AlertData) {
	o.AlertData = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *EmailRequest) GetRecipients() []Person {
	if o == nil || IsNil(o.Recipients) {
		var ret []Person
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetRecipientsOk() ([]Person, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *EmailRequest) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []Person and assigns it to the Recipients field.
func (o *EmailRequest) SetRecipients(v []Person) {
	o.Recipients = v
}

// GetRecipientFilters returns the RecipientFilters field value if set, zero value otherwise.
func (o *EmailRequest) GetRecipientFilters() PeopleFilters {
	if o == nil || IsNil(o.RecipientFilters) {
		var ret PeopleFilters
		return ret
	}
	return *o.RecipientFilters
}

// GetRecipientFiltersOk returns a tuple with the RecipientFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetRecipientFiltersOk() (*PeopleFilters, bool) {
	if o == nil || IsNil(o.RecipientFilters) {
		return nil, false
	}
	return o.RecipientFilters, true
}

// HasRecipientFilters returns a boolean if a field has been set.
func (o *EmailRequest) HasRecipientFilters() bool {
	if o != nil && !IsNil(o.RecipientFilters) {
		return true
	}

	return false
}

// SetRecipientFilters gets a reference to the given PeopleFilters and assigns it to the RecipientFilters field.
func (o *EmailRequest) SetRecipientFilters(v PeopleFilters) {
	o.RecipientFilters = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *EmailRequest) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *EmailRequest) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *EmailRequest) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetDatasourceInstance returns the DatasourceInstance field value if set, zero value otherwise.
func (o *EmailRequest) GetDatasourceInstance() string {
	if o == nil || IsNil(o.DatasourceInstance) {
		var ret string
		return ret
	}
	return *o.DatasourceInstance
}

// GetDatasourceInstanceOk returns a tuple with the DatasourceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetDatasourceInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceInstance) {
		return nil, false
	}
	return o.DatasourceInstance, true
}

// HasDatasourceInstance returns a boolean if a field has been set.
func (o *EmailRequest) HasDatasourceInstance() bool {
	if o != nil && !IsNil(o.DatasourceInstance) {
		return true
	}

	return false
}

// SetDatasourceInstance gets a reference to the given string and assigns it to the DatasourceInstance field.
func (o *EmailRequest) SetDatasourceInstance(v string) {
	o.DatasourceInstance = &v
}

// GetSenders returns the Senders field value if set, zero value otherwise.
func (o *EmailRequest) GetSenders() []Person {
	if o == nil || IsNil(o.Senders) {
		var ret []Person
		return ret
	}
	return o.Senders
}

// GetSendersOk returns a tuple with the Senders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetSendersOk() ([]Person, bool) {
	if o == nil || IsNil(o.Senders) {
		return nil, false
	}
	return o.Senders, true
}

// HasSenders returns a boolean if a field has been set.
func (o *EmailRequest) HasSenders() bool {
	if o != nil && !IsNil(o.Senders) {
		return true
	}

	return false
}

// SetSenders gets a reference to the given []Person and assigns it to the Senders field.
func (o *EmailRequest) SetSenders(v []Person) {
	o.Senders = v
}

// GetWebAppUrl returns the WebAppUrl field value if set, zero value otherwise.
func (o *EmailRequest) GetWebAppUrl() string {
	if o == nil || IsNil(o.WebAppUrl) {
		var ret string
		return ret
	}
	return *o.WebAppUrl
}

// GetWebAppUrlOk returns a tuple with the WebAppUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetWebAppUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebAppUrl) {
		return nil, false
	}
	return o.WebAppUrl, true
}

// HasWebAppUrl returns a boolean if a field has been set.
func (o *EmailRequest) HasWebAppUrl() bool {
	if o != nil && !IsNil(o.WebAppUrl) {
		return true
	}

	return false
}

// SetWebAppUrl gets a reference to the given string and assigns it to the WebAppUrl field.
func (o *EmailRequest) SetWebAppUrl(v string) {
	o.WebAppUrl = &v
}

// GetServerUrl returns the ServerUrl field value if set, zero value otherwise.
func (o *EmailRequest) GetServerUrl() string {
	if o == nil || IsNil(o.ServerUrl) {
		var ret string
		return ret
	}
	return *o.ServerUrl
}

// GetServerUrlOk returns a tuple with the ServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetServerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUrl) {
		return nil, false
	}
	return o.ServerUrl, true
}

// HasServerUrl returns a boolean if a field has been set.
func (o *EmailRequest) HasServerUrl() bool {
	if o != nil && !IsNil(o.ServerUrl) {
		return true
	}

	return false
}

// SetServerUrl gets a reference to the given string and assigns it to the ServerUrl field.
func (o *EmailRequest) SetServerUrl(v string) {
	o.ServerUrl = &v
}

// GetUnsubscribeUrl returns the UnsubscribeUrl field value if set, zero value otherwise.
func (o *EmailRequest) GetUnsubscribeUrl() string {
	if o == nil || IsNil(o.UnsubscribeUrl) {
		var ret string
		return ret
	}
	return *o.UnsubscribeUrl
}

// GetUnsubscribeUrlOk returns a tuple with the UnsubscribeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetUnsubscribeUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UnsubscribeUrl) {
		return nil, false
	}
	return o.UnsubscribeUrl, true
}

// HasUnsubscribeUrl returns a boolean if a field has been set.
func (o *EmailRequest) HasUnsubscribeUrl() bool {
	if o != nil && !IsNil(o.UnsubscribeUrl) {
		return true
	}

	return false
}

// SetUnsubscribeUrl gets a reference to the given string and assigns it to the UnsubscribeUrl field.
func (o *EmailRequest) SetUnsubscribeUrl(v string) {
	o.UnsubscribeUrl = &v
}

// GetDocuments returns the Documents field value if set, zero value otherwise.
func (o *EmailRequest) GetDocuments() []Document {
	if o == nil || IsNil(o.Documents) {
		var ret []Document
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetDocumentsOk() ([]Document, bool) {
	if o == nil || IsNil(o.Documents) {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *EmailRequest) HasDocuments() bool {
	if o != nil && !IsNil(o.Documents) {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []Document and assigns it to the Documents field.
func (o *EmailRequest) SetDocuments(v []Document) {
	o.Documents = v
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *EmailRequest) GetReasons() []string {
	if o == nil || IsNil(o.Reasons) {
		var ret []string
		return ret
	}
	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *EmailRequest) HasReasons() bool {
	if o != nil && !IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given []string and assigns it to the Reasons field.
func (o *EmailRequest) SetReasons(v []string) {
	o.Reasons = v
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *EmailRequest) GetBlocks() map[string][]map[string]interface{} {
	if o == nil || IsNil(o.Blocks) {
		var ret map[string][]map[string]interface{}
		return ret
	}
	return *o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetBlocksOk() (*map[string][]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *EmailRequest) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given map[string][]map[string]interface{} and assigns it to the Blocks field.
func (o *EmailRequest) SetBlocks(v map[string][]map[string]interface{}) {
	o.Blocks = &v
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *EmailRequest) GetSubjects() map[string]string {
	if o == nil || IsNil(o.Subjects) {
		var ret map[string]string
		return ret
	}
	return *o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetSubjectsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Subjects) {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *EmailRequest) HasSubjects() bool {
	if o != nil && !IsNil(o.Subjects) {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given map[string]string and assigns it to the Subjects field.
func (o *EmailRequest) SetSubjects(v map[string]string) {
	o.Subjects = &v
}

// GetFeedbackPayload returns the FeedbackPayload field value if set, zero value otherwise.
func (o *EmailRequest) GetFeedbackPayload() EmailRequestFeedbackPayload {
	if o == nil || IsNil(o.FeedbackPayload) {
		var ret EmailRequestFeedbackPayload
		return ret
	}
	return *o.FeedbackPayload
}

// GetFeedbackPayloadOk returns a tuple with the FeedbackPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetFeedbackPayloadOk() (*EmailRequestFeedbackPayload, bool) {
	if o == nil || IsNil(o.FeedbackPayload) {
		return nil, false
	}
	return o.FeedbackPayload, true
}

// HasFeedbackPayload returns a boolean if a field has been set.
func (o *EmailRequest) HasFeedbackPayload() bool {
	if o != nil && !IsNil(o.FeedbackPayload) {
		return true
	}

	return false
}

// SetFeedbackPayload gets a reference to the given EmailRequestFeedbackPayload and assigns it to the FeedbackPayload field.
func (o *EmailRequest) SetFeedbackPayload(v EmailRequestFeedbackPayload) {
	o.FeedbackPayload = &v
}

// GetChatFeedbackPayload returns the ChatFeedbackPayload field value if set, zero value otherwise.
func (o *EmailRequest) GetChatFeedbackPayload() EmailRequestChatFeedbackPayload {
	if o == nil || IsNil(o.ChatFeedbackPayload) {
		var ret EmailRequestChatFeedbackPayload
		return ret
	}
	return *o.ChatFeedbackPayload
}

// GetChatFeedbackPayloadOk returns a tuple with the ChatFeedbackPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetChatFeedbackPayloadOk() (*EmailRequestChatFeedbackPayload, bool) {
	if o == nil || IsNil(o.ChatFeedbackPayload) {
		return nil, false
	}
	return o.ChatFeedbackPayload, true
}

// HasChatFeedbackPayload returns a boolean if a field has been set.
func (o *EmailRequest) HasChatFeedbackPayload() bool {
	if o != nil && !IsNil(o.ChatFeedbackPayload) {
		return true
	}

	return false
}

// SetChatFeedbackPayload gets a reference to the given EmailRequestChatFeedbackPayload and assigns it to the ChatFeedbackPayload field.
func (o *EmailRequest) SetChatFeedbackPayload(v EmailRequestChatFeedbackPayload) {
	o.ChatFeedbackPayload = &v
}

func (o EmailRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emailTemplate"] = o.EmailTemplate
	if !IsNil(o.AlertData) {
		toSerialize["alertData"] = o.AlertData
	}
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	if !IsNil(o.RecipientFilters) {
		toSerialize["recipientFilters"] = o.RecipientFilters
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.DatasourceInstance) {
		toSerialize["datasourceInstance"] = o.DatasourceInstance
	}
	if !IsNil(o.Senders) {
		toSerialize["senders"] = o.Senders
	}
	if !IsNil(o.WebAppUrl) {
		toSerialize["webAppUrl"] = o.WebAppUrl
	}
	if !IsNil(o.ServerUrl) {
		toSerialize["serverUrl"] = o.ServerUrl
	}
	if !IsNil(o.UnsubscribeUrl) {
		toSerialize["unsubscribeUrl"] = o.UnsubscribeUrl
	}
	if !IsNil(o.Documents) {
		toSerialize["documents"] = o.Documents
	}
	if !IsNil(o.Reasons) {
		toSerialize["reasons"] = o.Reasons
	}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !IsNil(o.Subjects) {
		toSerialize["subjects"] = o.Subjects
	}
	if !IsNil(o.FeedbackPayload) {
		toSerialize["feedbackPayload"] = o.FeedbackPayload
	}
	if !IsNil(o.ChatFeedbackPayload) {
		toSerialize["chatFeedbackPayload"] = o.ChatFeedbackPayload
	}
	return toSerialize, nil
}

func (o *EmailRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emailTemplate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailRequest := _EmailRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailRequest)

	if err != nil {
		return err
	}

	*o = EmailRequest(varEmailRequest)

	return err
}

type NullableEmailRequest struct {
	value *EmailRequest
	isSet bool
}

func (v NullableEmailRequest) Get() *EmailRequest {
	return v.value
}

func (v *NullableEmailRequest) Set(val *EmailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRequest(val *EmailRequest) *NullableEmailRequest {
	return &NullableEmailRequest{value: val, isSet: true}
}

func (v NullableEmailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


