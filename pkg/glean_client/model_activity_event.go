/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ActivityEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityEvent{}

// ActivityEvent struct for ActivityEvent
type ActivityEvent struct {
	// Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
	Id *string `json:"id,omitempty"`
	// The type of activity this represents.
	Action string `json:"action"`
	Params *ActivityEventParams `json:"params,omitempty"`
	// The ISO 8601 timestamp when the activity began.
	Timestamp time.Time `json:"timestamp"`
	// The URL of the activity.
	Url string `json:"url"`
}

type _ActivityEvent ActivityEvent

// NewActivityEvent instantiates a new ActivityEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityEvent(action string, timestamp time.Time, url string) *ActivityEvent {
	this := ActivityEvent{}
	this.Action = action
	this.Timestamp = timestamp
	this.Url = url
	return &this
}

// NewActivityEventWithDefaults instantiates a new ActivityEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityEventWithDefaults() *ActivityEvent {
	this := ActivityEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActivityEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActivityEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActivityEvent) SetId(v string) {
	o.Id = &v
}

// GetAction returns the Action field value
func (o *ActivityEvent) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ActivityEvent) SetAction(v string) {
	o.Action = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ActivityEvent) GetParams() ActivityEventParams {
	if o == nil || IsNil(o.Params) {
		var ret ActivityEventParams
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetParamsOk() (*ActivityEventParams, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ActivityEvent) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given ActivityEventParams and assigns it to the Params field.
func (o *ActivityEvent) SetParams(v ActivityEventParams) {
	o.Params = &v
}

// GetTimestamp returns the Timestamp field value
func (o *ActivityEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ActivityEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetUrl returns the Url field value
func (o *ActivityEvent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ActivityEvent) SetUrl(v string) {
	o.Url = v
}

func (o ActivityEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["action"] = o.Action
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *ActivityEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"timestamp",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivityEvent := _ActivityEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivityEvent)

	if err != nil {
		return err
	}

	*o = ActivityEvent(varActivityEvent)

	return err
}

type NullableActivityEvent struct {
	value *ActivityEvent
	isSet bool
}

func (v NullableActivityEvent) Get() *ActivityEvent {
	return v.value
}

func (v *NullableActivityEvent) Set(val *ActivityEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityEvent(val *ActivityEvent) *NullableActivityEvent {
	return &NullableActivityEvent{value: val, isSet: true}
}

func (v NullableActivityEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


