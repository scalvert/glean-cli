/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the EmailRequestChatFeedbackPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailRequestChatFeedbackPayload{}

// EmailRequestChatFeedbackPayload Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
type EmailRequestChatFeedbackPayload struct {
	// Rating given to the conversation (currently either \"upvoted\" or \"downvoted\").
	Rating *string `json:"rating,omitempty"`
	// Additional freeform comments provided by the reporter.
	Comments *string `json:"comments,omitempty"`
	// Previous messages in this conversation.
	PreviousMessages []string `json:"previousMessages,omitempty"`
}

// NewEmailRequestChatFeedbackPayload instantiates a new EmailRequestChatFeedbackPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRequestChatFeedbackPayload() *EmailRequestChatFeedbackPayload {
	this := EmailRequestChatFeedbackPayload{}
	return &this
}

// NewEmailRequestChatFeedbackPayloadWithDefaults instantiates a new EmailRequestChatFeedbackPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRequestChatFeedbackPayloadWithDefaults() *EmailRequestChatFeedbackPayload {
	this := EmailRequestChatFeedbackPayload{}
	return &this
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *EmailRequestChatFeedbackPayload) GetRating() string {
	if o == nil || IsNil(o.Rating) {
		var ret string
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequestChatFeedbackPayload) GetRatingOk() (*string, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *EmailRequestChatFeedbackPayload) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given string and assigns it to the Rating field.
func (o *EmailRequestChatFeedbackPayload) SetRating(v string) {
	o.Rating = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *EmailRequestChatFeedbackPayload) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequestChatFeedbackPayload) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *EmailRequestChatFeedbackPayload) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *EmailRequestChatFeedbackPayload) SetComments(v string) {
	o.Comments = &v
}

// GetPreviousMessages returns the PreviousMessages field value if set, zero value otherwise.
func (o *EmailRequestChatFeedbackPayload) GetPreviousMessages() []string {
	if o == nil || IsNil(o.PreviousMessages) {
		var ret []string
		return ret
	}
	return o.PreviousMessages
}

// GetPreviousMessagesOk returns a tuple with the PreviousMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequestChatFeedbackPayload) GetPreviousMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousMessages) {
		return nil, false
	}
	return o.PreviousMessages, true
}

// HasPreviousMessages returns a boolean if a field has been set.
func (o *EmailRequestChatFeedbackPayload) HasPreviousMessages() bool {
	if o != nil && !IsNil(o.PreviousMessages) {
		return true
	}

	return false
}

// SetPreviousMessages gets a reference to the given []string and assigns it to the PreviousMessages field.
func (o *EmailRequestChatFeedbackPayload) SetPreviousMessages(v []string) {
	o.PreviousMessages = v
}

func (o EmailRequestChatFeedbackPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailRequestChatFeedbackPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.PreviousMessages) {
		toSerialize["previousMessages"] = o.PreviousMessages
	}
	return toSerialize, nil
}

type NullableEmailRequestChatFeedbackPayload struct {
	value *EmailRequestChatFeedbackPayload
	isSet bool
}

func (v NullableEmailRequestChatFeedbackPayload) Get() *EmailRequestChatFeedbackPayload {
	return v.value
}

func (v *NullableEmailRequestChatFeedbackPayload) Set(val *EmailRequestChatFeedbackPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRequestChatFeedbackPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRequestChatFeedbackPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRequestChatFeedbackPayload(val *EmailRequestChatFeedbackPayload) *NullableEmailRequestChatFeedbackPayload {
	return &NullableEmailRequestChatFeedbackPayload{value: val, isSet: true}
}

func (v NullableEmailRequestChatFeedbackPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRequestChatFeedbackPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


