/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the CollectionPinnedMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionPinnedMetadata{}

// CollectionPinnedMetadata struct for CollectionPinnedMetadata
type CollectionPinnedMetadata struct {
	// List of targets this Collection is pinned to.
	ExistingPins []CollectionPinTarget `json:"existingPins,omitempty"`
	// List of targets this Collection can be pinned to, excluding the targets this Collection is already pinned to. We also include Collection ID already is pinned to each eligible target, which will be 0 if the target has no pinned Collection.
	EligiblePins []CollectionPinMetadata `json:"eligiblePins,omitempty"`
}

// NewCollectionPinnedMetadata instantiates a new CollectionPinnedMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionPinnedMetadata() *CollectionPinnedMetadata {
	this := CollectionPinnedMetadata{}
	return &this
}

// NewCollectionPinnedMetadataWithDefaults instantiates a new CollectionPinnedMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionPinnedMetadataWithDefaults() *CollectionPinnedMetadata {
	this := CollectionPinnedMetadata{}
	return &this
}

// GetExistingPins returns the ExistingPins field value if set, zero value otherwise.
func (o *CollectionPinnedMetadata) GetExistingPins() []CollectionPinTarget {
	if o == nil || IsNil(o.ExistingPins) {
		var ret []CollectionPinTarget
		return ret
	}
	return o.ExistingPins
}

// GetExistingPinsOk returns a tuple with the ExistingPins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionPinnedMetadata) GetExistingPinsOk() ([]CollectionPinTarget, bool) {
	if o == nil || IsNil(o.ExistingPins) {
		return nil, false
	}
	return o.ExistingPins, true
}

// HasExistingPins returns a boolean if a field has been set.
func (o *CollectionPinnedMetadata) HasExistingPins() bool {
	if o != nil && !IsNil(o.ExistingPins) {
		return true
	}

	return false
}

// SetExistingPins gets a reference to the given []CollectionPinTarget and assigns it to the ExistingPins field.
func (o *CollectionPinnedMetadata) SetExistingPins(v []CollectionPinTarget) {
	o.ExistingPins = v
}

// GetEligiblePins returns the EligiblePins field value if set, zero value otherwise.
func (o *CollectionPinnedMetadata) GetEligiblePins() []CollectionPinMetadata {
	if o == nil || IsNil(o.EligiblePins) {
		var ret []CollectionPinMetadata
		return ret
	}
	return o.EligiblePins
}

// GetEligiblePinsOk returns a tuple with the EligiblePins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionPinnedMetadata) GetEligiblePinsOk() ([]CollectionPinMetadata, bool) {
	if o == nil || IsNil(o.EligiblePins) {
		return nil, false
	}
	return o.EligiblePins, true
}

// HasEligiblePins returns a boolean if a field has been set.
func (o *CollectionPinnedMetadata) HasEligiblePins() bool {
	if o != nil && !IsNil(o.EligiblePins) {
		return true
	}

	return false
}

// SetEligiblePins gets a reference to the given []CollectionPinMetadata and assigns it to the EligiblePins field.
func (o *CollectionPinnedMetadata) SetEligiblePins(v []CollectionPinMetadata) {
	o.EligiblePins = v
}

func (o CollectionPinnedMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionPinnedMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExistingPins) {
		toSerialize["existingPins"] = o.ExistingPins
	}
	if !IsNil(o.EligiblePins) {
		toSerialize["eligiblePins"] = o.EligiblePins
	}
	return toSerialize, nil
}

type NullableCollectionPinnedMetadata struct {
	value *CollectionPinnedMetadata
	isSet bool
}

func (v NullableCollectionPinnedMetadata) Get() *CollectionPinnedMetadata {
	return v.value
}

func (v *NullableCollectionPinnedMetadata) Set(val *CollectionPinnedMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionPinnedMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionPinnedMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionPinnedMetadata(val *CollectionPinnedMetadata) *NullableCollectionPinnedMetadata {
	return &NullableCollectionPinnedMetadata{value: val, isSet: true}
}

func (v NullableCollectionPinnedMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionPinnedMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


