/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImageMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageMetadata{}

// ImageMetadata struct for ImageMetadata
type ImageMetadata struct {
	Type ImageType `json:"type"`
	// ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
	Id *string `json:"id,omitempty"`
	// A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
	Ds *string `json:"ds,omitempty"`
	// Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
	Cid *string `json:"cid,omitempty"`
	// Extension the image is saved with. The extension data is deduced from content type for image uploads.
	Ext *string `json:"ext,omitempty"`
}

type _ImageMetadata ImageMetadata

// NewImageMetadata instantiates a new ImageMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageMetadata(type_ ImageType) *ImageMetadata {
	this := ImageMetadata{}
	this.Type = type_
	return &this
}

// NewImageMetadataWithDefaults instantiates a new ImageMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageMetadataWithDefaults() *ImageMetadata {
	this := ImageMetadata{}
	return &this
}

// GetType returns the Type field value
func (o *ImageMetadata) GetType() ImageType {
	if o == nil {
		var ret ImageType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetTypeOk() (*ImageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ImageMetadata) SetType(v ImageType) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImageMetadata) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImageMetadata) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImageMetadata) SetId(v string) {
	o.Id = &v
}

// GetDs returns the Ds field value if set, zero value otherwise.
func (o *ImageMetadata) GetDs() string {
	if o == nil || IsNil(o.Ds) {
		var ret string
		return ret
	}
	return *o.Ds
}

// GetDsOk returns a tuple with the Ds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetDsOk() (*string, bool) {
	if o == nil || IsNil(o.Ds) {
		return nil, false
	}
	return o.Ds, true
}

// HasDs returns a boolean if a field has been set.
func (o *ImageMetadata) HasDs() bool {
	if o != nil && !IsNil(o.Ds) {
		return true
	}

	return false
}

// SetDs gets a reference to the given string and assigns it to the Ds field.
func (o *ImageMetadata) SetDs(v string) {
	o.Ds = &v
}

// GetCid returns the Cid field value if set, zero value otherwise.
func (o *ImageMetadata) GetCid() string {
	if o == nil || IsNil(o.Cid) {
		var ret string
		return ret
	}
	return *o.Cid
}

// GetCidOk returns a tuple with the Cid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetCidOk() (*string, bool) {
	if o == nil || IsNil(o.Cid) {
		return nil, false
	}
	return o.Cid, true
}

// HasCid returns a boolean if a field has been set.
func (o *ImageMetadata) HasCid() bool {
	if o != nil && !IsNil(o.Cid) {
		return true
	}

	return false
}

// SetCid gets a reference to the given string and assigns it to the Cid field.
func (o *ImageMetadata) SetCid(v string) {
	o.Cid = &v
}

// GetExt returns the Ext field value if set, zero value otherwise.
func (o *ImageMetadata) GetExt() string {
	if o == nil || IsNil(o.Ext) {
		var ret string
		return ret
	}
	return *o.Ext
}

// GetExtOk returns a tuple with the Ext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetExtOk() (*string, bool) {
	if o == nil || IsNil(o.Ext) {
		return nil, false
	}
	return o.Ext, true
}

// HasExt returns a boolean if a field has been set.
func (o *ImageMetadata) HasExt() bool {
	if o != nil && !IsNil(o.Ext) {
		return true
	}

	return false
}

// SetExt gets a reference to the given string and assigns it to the Ext field.
func (o *ImageMetadata) SetExt(v string) {
	o.Ext = &v
}

func (o ImageMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ds) {
		toSerialize["ds"] = o.Ds
	}
	if !IsNil(o.Cid) {
		toSerialize["cid"] = o.Cid
	}
	if !IsNil(o.Ext) {
		toSerialize["ext"] = o.Ext
	}
	return toSerialize, nil
}

func (o *ImageMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageMetadata := _ImageMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImageMetadata)

	if err != nil {
		return err
	}

	*o = ImageMetadata(varImageMetadata)

	return err
}

type NullableImageMetadata struct {
	value *ImageMetadata
	isSet bool
}

func (v NullableImageMetadata) Get() *ImageMetadata {
	return v.value
}

func (v *NullableImageMetadata) Set(val *ImageMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableImageMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableImageMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageMetadata(val *ImageMetadata) *NullableImageMetadata {
	return &NullableImageMetadata{value: val, isSet: true}
}

func (v NullableImageMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


