/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteCollectionItemRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteCollectionItemRequest{}

// DeleteCollectionItemRequest struct for DeleteCollectionItemRequest
type DeleteCollectionItemRequest struct {
	// The ID of the Collection to remove an item in.
	CollectionId float32 `json:"collectionId"`
	// The item ID of the CollectionItem to remove from this Collection.
	ItemId string `json:"itemId"`
	// The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
	DocumentId *string `json:"documentId,omitempty"`
}

type _DeleteCollectionItemRequest DeleteCollectionItemRequest

// NewDeleteCollectionItemRequest instantiates a new DeleteCollectionItemRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteCollectionItemRequest(collectionId float32, itemId string) *DeleteCollectionItemRequest {
	this := DeleteCollectionItemRequest{}
	this.CollectionId = collectionId
	this.ItemId = itemId
	return &this
}

// NewDeleteCollectionItemRequestWithDefaults instantiates a new DeleteCollectionItemRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteCollectionItemRequestWithDefaults() *DeleteCollectionItemRequest {
	this := DeleteCollectionItemRequest{}
	return &this
}

// GetCollectionId returns the CollectionId field value
func (o *DeleteCollectionItemRequest) GetCollectionId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value
// and a boolean to check if the value has been set.
func (o *DeleteCollectionItemRequest) GetCollectionIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionId, true
}

// SetCollectionId sets field value
func (o *DeleteCollectionItemRequest) SetCollectionId(v float32) {
	o.CollectionId = v
}

// GetItemId returns the ItemId field value
func (o *DeleteCollectionItemRequest) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *DeleteCollectionItemRequest) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *DeleteCollectionItemRequest) SetItemId(v string) {
	o.ItemId = v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *DeleteCollectionItemRequest) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteCollectionItemRequest) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *DeleteCollectionItemRequest) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *DeleteCollectionItemRequest) SetDocumentId(v string) {
	o.DocumentId = &v
}

func (o DeleteCollectionItemRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteCollectionItemRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collectionId"] = o.CollectionId
	toSerialize["itemId"] = o.ItemId
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	return toSerialize, nil
}

func (o *DeleteCollectionItemRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collectionId",
		"itemId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteCollectionItemRequest := _DeleteCollectionItemRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteCollectionItemRequest)

	if err != nil {
		return err
	}

	*o = DeleteCollectionItemRequest(varDeleteCollectionItemRequest)

	return err
}

type NullableDeleteCollectionItemRequest struct {
	value *DeleteCollectionItemRequest
	isSet bool
}

func (v NullableDeleteCollectionItemRequest) Get() *DeleteCollectionItemRequest {
	return v.value
}

func (v *NullableDeleteCollectionItemRequest) Set(val *DeleteCollectionItemRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteCollectionItemRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteCollectionItemRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteCollectionItemRequest(val *DeleteCollectionItemRequest) *NullableDeleteCollectionItemRequest {
	return &NullableDeleteCollectionItemRequest{value: val, isSet: true}
}

func (v NullableDeleteCollectionItemRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteCollectionItemRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


