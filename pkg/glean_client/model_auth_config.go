/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the AuthConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthConfig{}

// AuthConfig Config for tool's authentication method.
type AuthConfig struct {
	// Whether or not this tool is hosted on-premise.
	IsOnPrem *bool `json:"isOnPrem,omitempty"`
	// The type of authentication being used. Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token. 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users. 'OAUTH_USER' uses individual user tokens for external API calls.
	Type *string `json:"type,omitempty"`
	// Auth status of the tool.
	Status *string `json:"status,omitempty"`
	// The URL where users will be directed to start the OAuth flow.
	ClientUrl *string `json:"client_url,omitempty"`
	// A list of strings denoting the different scopes or access levels required by the tool.
	Scopes []string `json:"scopes,omitempty"`
	// The OAuth provider's endpoint, where access tokens are requested.
	AuthorizationUrl *string `json:"authorization_url,omitempty"`
}

// NewAuthConfig instantiates a new AuthConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthConfig() *AuthConfig {
	this := AuthConfig{}
	return &this
}

// NewAuthConfigWithDefaults instantiates a new AuthConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthConfigWithDefaults() *AuthConfig {
	this := AuthConfig{}
	return &this
}

// GetIsOnPrem returns the IsOnPrem field value if set, zero value otherwise.
func (o *AuthConfig) GetIsOnPrem() bool {
	if o == nil || IsNil(o.IsOnPrem) {
		var ret bool
		return ret
	}
	return *o.IsOnPrem
}

// GetIsOnPremOk returns a tuple with the IsOnPrem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfig) GetIsOnPremOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOnPrem) {
		return nil, false
	}
	return o.IsOnPrem, true
}

// HasIsOnPrem returns a boolean if a field has been set.
func (o *AuthConfig) HasIsOnPrem() bool {
	if o != nil && !IsNil(o.IsOnPrem) {
		return true
	}

	return false
}

// SetIsOnPrem gets a reference to the given bool and assigns it to the IsOnPrem field.
func (o *AuthConfig) SetIsOnPrem(v bool) {
	o.IsOnPrem = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuthConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuthConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuthConfig) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AuthConfig) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfig) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AuthConfig) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AuthConfig) SetStatus(v string) {
	o.Status = &v
}

// GetClientUrl returns the ClientUrl field value if set, zero value otherwise.
func (o *AuthConfig) GetClientUrl() string {
	if o == nil || IsNil(o.ClientUrl) {
		var ret string
		return ret
	}
	return *o.ClientUrl
}

// GetClientUrlOk returns a tuple with the ClientUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfig) GetClientUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ClientUrl) {
		return nil, false
	}
	return o.ClientUrl, true
}

// HasClientUrl returns a boolean if a field has been set.
func (o *AuthConfig) HasClientUrl() bool {
	if o != nil && !IsNil(o.ClientUrl) {
		return true
	}

	return false
}

// SetClientUrl gets a reference to the given string and assigns it to the ClientUrl field.
func (o *AuthConfig) SetClientUrl(v string) {
	o.ClientUrl = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AuthConfig) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfig) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AuthConfig) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *AuthConfig) SetScopes(v []string) {
	o.Scopes = v
}

// GetAuthorizationUrl returns the AuthorizationUrl field value if set, zero value otherwise.
func (o *AuthConfig) GetAuthorizationUrl() string {
	if o == nil || IsNil(o.AuthorizationUrl) {
		var ret string
		return ret
	}
	return *o.AuthorizationUrl
}

// GetAuthorizationUrlOk returns a tuple with the AuthorizationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfig) GetAuthorizationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationUrl) {
		return nil, false
	}
	return o.AuthorizationUrl, true
}

// HasAuthorizationUrl returns a boolean if a field has been set.
func (o *AuthConfig) HasAuthorizationUrl() bool {
	if o != nil && !IsNil(o.AuthorizationUrl) {
		return true
	}

	return false
}

// SetAuthorizationUrl gets a reference to the given string and assigns it to the AuthorizationUrl field.
func (o *AuthConfig) SetAuthorizationUrl(v string) {
	o.AuthorizationUrl = &v
}

func (o AuthConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsOnPrem) {
		toSerialize["isOnPrem"] = o.IsOnPrem
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ClientUrl) {
		toSerialize["client_url"] = o.ClientUrl
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.AuthorizationUrl) {
		toSerialize["authorization_url"] = o.AuthorizationUrl
	}
	return toSerialize, nil
}

type NullableAuthConfig struct {
	value *AuthConfig
	isSet bool
}

func (v NullableAuthConfig) Get() *AuthConfig {
	return v.value
}

func (v *NullableAuthConfig) Set(val *AuthConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthConfig(val *AuthConfig) *NullableAuthConfig {
	return &NullableAuthConfig{value: val, isSet: true}
}

func (v NullableAuthConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


