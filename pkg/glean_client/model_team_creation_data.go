/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the TeamCreationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamCreationData{}

// TeamCreationData struct for TeamCreationData
type TeamCreationData struct {
	// For people field teams, the field value, e.g. ENGINEERING. Otherwise, a Glean Document ID used to identify the team.
	Id *string `json:"id,omitempty"`
	// if the data source is people fields, then this is the field name (otherwise it's ignored)
	PeopleField *string `json:"peopleField,omitempty"`
	// what data source this team comes from, e.g. GDRIVE
	Datasource *string `json:"datasource,omitempty"`
	// If the team is from a doc (i.e. not from a people field), this is the doc title, e.g. for Slack channels, the channel name. Otherwise, it's ignored.
	CreatedFrom *string `json:"createdFrom,omitempty"`
}

// NewTeamCreationData instantiates a new TeamCreationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamCreationData() *TeamCreationData {
	this := TeamCreationData{}
	return &this
}

// NewTeamCreationDataWithDefaults instantiates a new TeamCreationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamCreationDataWithDefaults() *TeamCreationData {
	this := TeamCreationData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeamCreationData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamCreationData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeamCreationData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TeamCreationData) SetId(v string) {
	o.Id = &v
}

// GetPeopleField returns the PeopleField field value if set, zero value otherwise.
func (o *TeamCreationData) GetPeopleField() string {
	if o == nil || IsNil(o.PeopleField) {
		var ret string
		return ret
	}
	return *o.PeopleField
}

// GetPeopleFieldOk returns a tuple with the PeopleField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamCreationData) GetPeopleFieldOk() (*string, bool) {
	if o == nil || IsNil(o.PeopleField) {
		return nil, false
	}
	return o.PeopleField, true
}

// HasPeopleField returns a boolean if a field has been set.
func (o *TeamCreationData) HasPeopleField() bool {
	if o != nil && !IsNil(o.PeopleField) {
		return true
	}

	return false
}

// SetPeopleField gets a reference to the given string and assigns it to the PeopleField field.
func (o *TeamCreationData) SetPeopleField(v string) {
	o.PeopleField = &v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *TeamCreationData) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamCreationData) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *TeamCreationData) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *TeamCreationData) SetDatasource(v string) {
	o.Datasource = &v
}

// GetCreatedFrom returns the CreatedFrom field value if set, zero value otherwise.
func (o *TeamCreationData) GetCreatedFrom() string {
	if o == nil || IsNil(o.CreatedFrom) {
		var ret string
		return ret
	}
	return *o.CreatedFrom
}

// GetCreatedFromOk returns a tuple with the CreatedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamCreationData) GetCreatedFromOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedFrom) {
		return nil, false
	}
	return o.CreatedFrom, true
}

// HasCreatedFrom returns a boolean if a field has been set.
func (o *TeamCreationData) HasCreatedFrom() bool {
	if o != nil && !IsNil(o.CreatedFrom) {
		return true
	}

	return false
}

// SetCreatedFrom gets a reference to the given string and assigns it to the CreatedFrom field.
func (o *TeamCreationData) SetCreatedFrom(v string) {
	o.CreatedFrom = &v
}

func (o TeamCreationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamCreationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PeopleField) {
		toSerialize["peopleField"] = o.PeopleField
	}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.CreatedFrom) {
		toSerialize["createdFrom"] = o.CreatedFrom
	}
	return toSerialize, nil
}

type NullableTeamCreationData struct {
	value *TeamCreationData
	isSet bool
}

func (v NullableTeamCreationData) Get() *TeamCreationData {
	return v.value
}

func (v *NullableTeamCreationData) Set(val *TeamCreationData) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamCreationData) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamCreationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamCreationData(val *TeamCreationData) *NullableTeamCreationData {
	return &NullableTeamCreationData{value: val, isSet: true}
}

func (v NullableTeamCreationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamCreationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


