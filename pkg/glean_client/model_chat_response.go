/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the ChatResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatResponse{}

// ChatResponse A single response from the /chat backend.
type ChatResponse struct {
	Messages []ChatMessage `json:"messages,omitempty"`
	// The id of the associated Chat the messages belong to, if one exists.
	ChatId *string `json:"chatId,omitempty"`
	// Follow-up prompts for the user to potentially use
	FollowUpPrompts []string `json:"followUpPrompts,omitempty"`
	AgentConfig *AgentConfig `json:"agentConfig,omitempty"`
	// Time in milliseconds the backend took to respond to the request.
	BackendTimeMillis *int64 `json:"backendTimeMillis,omitempty"`
	// A token that is used to track the session.
	ChatSessionTrackingToken *string `json:"chatSessionTrackingToken,omitempty"`
}

// NewChatResponse instantiates a new ChatResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatResponse() *ChatResponse {
	this := ChatResponse{}
	return &this
}

// NewChatResponseWithDefaults instantiates a new ChatResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatResponseWithDefaults() *ChatResponse {
	this := ChatResponse{}
	return &this
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *ChatResponse) GetMessages() []ChatMessage {
	if o == nil || IsNil(o.Messages) {
		var ret []ChatMessage
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatResponse) GetMessagesOk() ([]ChatMessage, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *ChatResponse) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []ChatMessage and assigns it to the Messages field.
func (o *ChatResponse) SetMessages(v []ChatMessage) {
	o.Messages = v
}

// GetChatId returns the ChatId field value if set, zero value otherwise.
func (o *ChatResponse) GetChatId() string {
	if o == nil || IsNil(o.ChatId) {
		var ret string
		return ret
	}
	return *o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatResponse) GetChatIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChatId) {
		return nil, false
	}
	return o.ChatId, true
}

// HasChatId returns a boolean if a field has been set.
func (o *ChatResponse) HasChatId() bool {
	if o != nil && !IsNil(o.ChatId) {
		return true
	}

	return false
}

// SetChatId gets a reference to the given string and assigns it to the ChatId field.
func (o *ChatResponse) SetChatId(v string) {
	o.ChatId = &v
}

// GetFollowUpPrompts returns the FollowUpPrompts field value if set, zero value otherwise.
func (o *ChatResponse) GetFollowUpPrompts() []string {
	if o == nil || IsNil(o.FollowUpPrompts) {
		var ret []string
		return ret
	}
	return o.FollowUpPrompts
}

// GetFollowUpPromptsOk returns a tuple with the FollowUpPrompts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatResponse) GetFollowUpPromptsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowUpPrompts) {
		return nil, false
	}
	return o.FollowUpPrompts, true
}

// HasFollowUpPrompts returns a boolean if a field has been set.
func (o *ChatResponse) HasFollowUpPrompts() bool {
	if o != nil && !IsNil(o.FollowUpPrompts) {
		return true
	}

	return false
}

// SetFollowUpPrompts gets a reference to the given []string and assigns it to the FollowUpPrompts field.
func (o *ChatResponse) SetFollowUpPrompts(v []string) {
	o.FollowUpPrompts = v
}

// GetAgentConfig returns the AgentConfig field value if set, zero value otherwise.
func (o *ChatResponse) GetAgentConfig() AgentConfig {
	if o == nil || IsNil(o.AgentConfig) {
		var ret AgentConfig
		return ret
	}
	return *o.AgentConfig
}

// GetAgentConfigOk returns a tuple with the AgentConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatResponse) GetAgentConfigOk() (*AgentConfig, bool) {
	if o == nil || IsNil(o.AgentConfig) {
		return nil, false
	}
	return o.AgentConfig, true
}

// HasAgentConfig returns a boolean if a field has been set.
func (o *ChatResponse) HasAgentConfig() bool {
	if o != nil && !IsNil(o.AgentConfig) {
		return true
	}

	return false
}

// SetAgentConfig gets a reference to the given AgentConfig and assigns it to the AgentConfig field.
func (o *ChatResponse) SetAgentConfig(v AgentConfig) {
	o.AgentConfig = &v
}

// GetBackendTimeMillis returns the BackendTimeMillis field value if set, zero value otherwise.
func (o *ChatResponse) GetBackendTimeMillis() int64 {
	if o == nil || IsNil(o.BackendTimeMillis) {
		var ret int64
		return ret
	}
	return *o.BackendTimeMillis
}

// GetBackendTimeMillisOk returns a tuple with the BackendTimeMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatResponse) GetBackendTimeMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.BackendTimeMillis) {
		return nil, false
	}
	return o.BackendTimeMillis, true
}

// HasBackendTimeMillis returns a boolean if a field has been set.
func (o *ChatResponse) HasBackendTimeMillis() bool {
	if o != nil && !IsNil(o.BackendTimeMillis) {
		return true
	}

	return false
}

// SetBackendTimeMillis gets a reference to the given int64 and assigns it to the BackendTimeMillis field.
func (o *ChatResponse) SetBackendTimeMillis(v int64) {
	o.BackendTimeMillis = &v
}

// GetChatSessionTrackingToken returns the ChatSessionTrackingToken field value if set, zero value otherwise.
func (o *ChatResponse) GetChatSessionTrackingToken() string {
	if o == nil || IsNil(o.ChatSessionTrackingToken) {
		var ret string
		return ret
	}
	return *o.ChatSessionTrackingToken
}

// GetChatSessionTrackingTokenOk returns a tuple with the ChatSessionTrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatResponse) GetChatSessionTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ChatSessionTrackingToken) {
		return nil, false
	}
	return o.ChatSessionTrackingToken, true
}

// HasChatSessionTrackingToken returns a boolean if a field has been set.
func (o *ChatResponse) HasChatSessionTrackingToken() bool {
	if o != nil && !IsNil(o.ChatSessionTrackingToken) {
		return true
	}

	return false
}

// SetChatSessionTrackingToken gets a reference to the given string and assigns it to the ChatSessionTrackingToken field.
func (o *ChatResponse) SetChatSessionTrackingToken(v string) {
	o.ChatSessionTrackingToken = &v
}

func (o ChatResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.ChatId) {
		toSerialize["chatId"] = o.ChatId
	}
	if !IsNil(o.FollowUpPrompts) {
		toSerialize["followUpPrompts"] = o.FollowUpPrompts
	}
	if !IsNil(o.AgentConfig) {
		toSerialize["agentConfig"] = o.AgentConfig
	}
	if !IsNil(o.BackendTimeMillis) {
		toSerialize["backendTimeMillis"] = o.BackendTimeMillis
	}
	if !IsNil(o.ChatSessionTrackingToken) {
		toSerialize["chatSessionTrackingToken"] = o.ChatSessionTrackingToken
	}
	return toSerialize, nil
}

type NullableChatResponse struct {
	value *ChatResponse
	isSet bool
}

func (v NullableChatResponse) Get() *ChatResponse {
	return v.value
}

func (v *NullableChatResponse) Set(val *ChatResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChatResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChatResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatResponse(val *ChatResponse) *NullableChatResponse {
	return &NullableChatResponse{value: val, isSet: true}
}

func (v NullableChatResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


