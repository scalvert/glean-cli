/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnswerLikes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerLikes{}

// AnswerLikes struct for AnswerLikes
type AnswerLikes struct {
	LikedBy []AnswerLike `json:"likedBy"`
	// Whether the user in context liked the answer.
	LikedByUser bool `json:"likedByUser"`
	// The total number of likes for the answer.
	NumLikes int32 `json:"numLikes"`
}

type _AnswerLikes AnswerLikes

// NewAnswerLikes instantiates a new AnswerLikes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerLikes(likedBy []AnswerLike, likedByUser bool, numLikes int32) *AnswerLikes {
	this := AnswerLikes{}
	this.LikedBy = likedBy
	this.LikedByUser = likedByUser
	this.NumLikes = numLikes
	return &this
}

// NewAnswerLikesWithDefaults instantiates a new AnswerLikes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerLikesWithDefaults() *AnswerLikes {
	this := AnswerLikes{}
	return &this
}

// GetLikedBy returns the LikedBy field value
func (o *AnswerLikes) GetLikedBy() []AnswerLike {
	if o == nil {
		var ret []AnswerLike
		return ret
	}

	return o.LikedBy
}

// GetLikedByOk returns a tuple with the LikedBy field value
// and a boolean to check if the value has been set.
func (o *AnswerLikes) GetLikedByOk() ([]AnswerLike, bool) {
	if o == nil {
		return nil, false
	}
	return o.LikedBy, true
}

// SetLikedBy sets field value
func (o *AnswerLikes) SetLikedBy(v []AnswerLike) {
	o.LikedBy = v
}

// GetLikedByUser returns the LikedByUser field value
func (o *AnswerLikes) GetLikedByUser() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LikedByUser
}

// GetLikedByUserOk returns a tuple with the LikedByUser field value
// and a boolean to check if the value has been set.
func (o *AnswerLikes) GetLikedByUserOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LikedByUser, true
}

// SetLikedByUser sets field value
func (o *AnswerLikes) SetLikedByUser(v bool) {
	o.LikedByUser = v
}

// GetNumLikes returns the NumLikes field value
func (o *AnswerLikes) GetNumLikes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumLikes
}

// GetNumLikesOk returns a tuple with the NumLikes field value
// and a boolean to check if the value has been set.
func (o *AnswerLikes) GetNumLikesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumLikes, true
}

// SetNumLikes sets field value
func (o *AnswerLikes) SetNumLikes(v int32) {
	o.NumLikes = v
}

func (o AnswerLikes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerLikes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["likedBy"] = o.LikedBy
	toSerialize["likedByUser"] = o.LikedByUser
	toSerialize["numLikes"] = o.NumLikes
	return toSerialize, nil
}

func (o *AnswerLikes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"likedBy",
		"likedByUser",
		"numLikes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnswerLikes := _AnswerLikes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnswerLikes)

	if err != nil {
		return err
	}

	*o = AnswerLikes(varAnswerLikes)

	return err
}

type NullableAnswerLikes struct {
	value *AnswerLikes
	isSet bool
}

func (v NullableAnswerLikes) Get() *AnswerLikes {
	return v.value
}

func (v *NullableAnswerLikes) Set(val *AnswerLikes) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerLikes) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerLikes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerLikes(val *AnswerLikes) *NullableAnswerLikes {
	return &NullableAnswerLikes{value: val, isSet: true}
}

func (v NullableAnswerLikes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerLikes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


