/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CalendarAttendee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarAttendee{}

// CalendarAttendee struct for CalendarAttendee
type CalendarAttendee struct {
	// Whether or not this attendee is an organizer.
	IsOrganizer *bool `json:"isOrganizer,omitempty"`
	// Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
	IsInGroup *bool `json:"isInGroup,omitempty"`
	Person Person `json:"person"`
	// If this attendee is a group, represents the list of individual attendees in the group.
	GroupAttendees []CalendarAttendee `json:"groupAttendees,omitempty"`
	ResponseStatus *string `json:"responseStatus,omitempty"`
}

type _CalendarAttendee CalendarAttendee

// NewCalendarAttendee instantiates a new CalendarAttendee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarAttendee(person Person) *CalendarAttendee {
	this := CalendarAttendee{}
	this.Person = person
	return &this
}

// NewCalendarAttendeeWithDefaults instantiates a new CalendarAttendee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarAttendeeWithDefaults() *CalendarAttendee {
	this := CalendarAttendee{}
	return &this
}

// GetIsOrganizer returns the IsOrganizer field value if set, zero value otherwise.
func (o *CalendarAttendee) GetIsOrganizer() bool {
	if o == nil || IsNil(o.IsOrganizer) {
		var ret bool
		return ret
	}
	return *o.IsOrganizer
}

// GetIsOrganizerOk returns a tuple with the IsOrganizer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendee) GetIsOrganizerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOrganizer) {
		return nil, false
	}
	return o.IsOrganizer, true
}

// HasIsOrganizer returns a boolean if a field has been set.
func (o *CalendarAttendee) HasIsOrganizer() bool {
	if o != nil && !IsNil(o.IsOrganizer) {
		return true
	}

	return false
}

// SetIsOrganizer gets a reference to the given bool and assigns it to the IsOrganizer field.
func (o *CalendarAttendee) SetIsOrganizer(v bool) {
	o.IsOrganizer = &v
}

// GetIsInGroup returns the IsInGroup field value if set, zero value otherwise.
func (o *CalendarAttendee) GetIsInGroup() bool {
	if o == nil || IsNil(o.IsInGroup) {
		var ret bool
		return ret
	}
	return *o.IsInGroup
}

// GetIsInGroupOk returns a tuple with the IsInGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendee) GetIsInGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInGroup) {
		return nil, false
	}
	return o.IsInGroup, true
}

// HasIsInGroup returns a boolean if a field has been set.
func (o *CalendarAttendee) HasIsInGroup() bool {
	if o != nil && !IsNil(o.IsInGroup) {
		return true
	}

	return false
}

// SetIsInGroup gets a reference to the given bool and assigns it to the IsInGroup field.
func (o *CalendarAttendee) SetIsInGroup(v bool) {
	o.IsInGroup = &v
}

// GetPerson returns the Person field value
func (o *CalendarAttendee) GetPerson() Person {
	if o == nil {
		var ret Person
		return ret
	}

	return o.Person
}

// GetPersonOk returns a tuple with the Person field value
// and a boolean to check if the value has been set.
func (o *CalendarAttendee) GetPersonOk() (*Person, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Person, true
}

// SetPerson sets field value
func (o *CalendarAttendee) SetPerson(v Person) {
	o.Person = v
}

// GetGroupAttendees returns the GroupAttendees field value if set, zero value otherwise.
func (o *CalendarAttendee) GetGroupAttendees() []CalendarAttendee {
	if o == nil || IsNil(o.GroupAttendees) {
		var ret []CalendarAttendee
		return ret
	}
	return o.GroupAttendees
}

// GetGroupAttendeesOk returns a tuple with the GroupAttendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendee) GetGroupAttendeesOk() ([]CalendarAttendee, bool) {
	if o == nil || IsNil(o.GroupAttendees) {
		return nil, false
	}
	return o.GroupAttendees, true
}

// HasGroupAttendees returns a boolean if a field has been set.
func (o *CalendarAttendee) HasGroupAttendees() bool {
	if o != nil && !IsNil(o.GroupAttendees) {
		return true
	}

	return false
}

// SetGroupAttendees gets a reference to the given []CalendarAttendee and assigns it to the GroupAttendees field.
func (o *CalendarAttendee) SetGroupAttendees(v []CalendarAttendee) {
	o.GroupAttendees = v
}

// GetResponseStatus returns the ResponseStatus field value if set, zero value otherwise.
func (o *CalendarAttendee) GetResponseStatus() string {
	if o == nil || IsNil(o.ResponseStatus) {
		var ret string
		return ret
	}
	return *o.ResponseStatus
}

// GetResponseStatusOk returns a tuple with the ResponseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendee) GetResponseStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseStatus) {
		return nil, false
	}
	return o.ResponseStatus, true
}

// HasResponseStatus returns a boolean if a field has been set.
func (o *CalendarAttendee) HasResponseStatus() bool {
	if o != nil && !IsNil(o.ResponseStatus) {
		return true
	}

	return false
}

// SetResponseStatus gets a reference to the given string and assigns it to the ResponseStatus field.
func (o *CalendarAttendee) SetResponseStatus(v string) {
	o.ResponseStatus = &v
}

func (o CalendarAttendee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarAttendee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsOrganizer) {
		toSerialize["isOrganizer"] = o.IsOrganizer
	}
	if !IsNil(o.IsInGroup) {
		toSerialize["isInGroup"] = o.IsInGroup
	}
	toSerialize["person"] = o.Person
	if !IsNil(o.GroupAttendees) {
		toSerialize["groupAttendees"] = o.GroupAttendees
	}
	if !IsNil(o.ResponseStatus) {
		toSerialize["responseStatus"] = o.ResponseStatus
	}
	return toSerialize, nil
}

func (o *CalendarAttendee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"person",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCalendarAttendee := _CalendarAttendee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCalendarAttendee)

	if err != nil {
		return err
	}

	*o = CalendarAttendee(varCalendarAttendee)

	return err
}

type NullableCalendarAttendee struct {
	value *CalendarAttendee
	isSet bool
}

func (v NullableCalendarAttendee) Get() *CalendarAttendee {
	return v.value
}

func (v *NullableCalendarAttendee) Set(val *CalendarAttendee) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarAttendee) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarAttendee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarAttendee(val *CalendarAttendee) *NullableCalendarAttendee {
	return &NullableCalendarAttendee{value: val, isSet: true}
}

func (v NullableCalendarAttendee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarAttendee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


