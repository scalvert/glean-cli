/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserRoleSpecification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRoleSpecification{}

// UserRoleSpecification struct for UserRoleSpecification
type UserRoleSpecification struct {
	SourceDocumentSpec *DocumentSpec `json:"sourceDocumentSpec,omitempty"`
	Person *Person `json:"person,omitempty"`
	Group *Group `json:"group,omitempty"`
	Role UserRole `json:"role"`
}

type _UserRoleSpecification UserRoleSpecification

// NewUserRoleSpecification instantiates a new UserRoleSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRoleSpecification(role UserRole) *UserRoleSpecification {
	this := UserRoleSpecification{}
	this.Role = role
	return &this
}

// NewUserRoleSpecificationWithDefaults instantiates a new UserRoleSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRoleSpecificationWithDefaults() *UserRoleSpecification {
	this := UserRoleSpecification{}
	return &this
}

// GetSourceDocumentSpec returns the SourceDocumentSpec field value if set, zero value otherwise.
func (o *UserRoleSpecification) GetSourceDocumentSpec() DocumentSpec {
	if o == nil || IsNil(o.SourceDocumentSpec) {
		var ret DocumentSpec
		return ret
	}
	return *o.SourceDocumentSpec
}

// GetSourceDocumentSpecOk returns a tuple with the SourceDocumentSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetSourceDocumentSpecOk() (*DocumentSpec, bool) {
	if o == nil || IsNil(o.SourceDocumentSpec) {
		return nil, false
	}
	return o.SourceDocumentSpec, true
}

// HasSourceDocumentSpec returns a boolean if a field has been set.
func (o *UserRoleSpecification) HasSourceDocumentSpec() bool {
	if o != nil && !IsNil(o.SourceDocumentSpec) {
		return true
	}

	return false
}

// SetSourceDocumentSpec gets a reference to the given DocumentSpec and assigns it to the SourceDocumentSpec field.
func (o *UserRoleSpecification) SetSourceDocumentSpec(v DocumentSpec) {
	o.SourceDocumentSpec = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *UserRoleSpecification) GetPerson() Person {
	if o == nil || IsNil(o.Person) {
		var ret Person
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetPersonOk() (*Person, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *UserRoleSpecification) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given Person and assigns it to the Person field.
func (o *UserRoleSpecification) SetPerson(v Person) {
	o.Person = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *UserRoleSpecification) GetGroup() Group {
	if o == nil || IsNil(o.Group) {
		var ret Group
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetGroupOk() (*Group, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *UserRoleSpecification) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given Group and assigns it to the Group field.
func (o *UserRoleSpecification) SetGroup(v Group) {
	o.Group = &v
}

// GetRole returns the Role field value
func (o *UserRoleSpecification) GetRole() UserRole {
	if o == nil {
		var ret UserRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetRoleOk() (*UserRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserRoleSpecification) SetRole(v UserRole) {
	o.Role = v
}

func (o UserRoleSpecification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRoleSpecification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceDocumentSpec) {
		toSerialize["sourceDocumentSpec"] = o.SourceDocumentSpec
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *UserRoleSpecification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserRoleSpecification := _UserRoleSpecification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserRoleSpecification)

	if err != nil {
		return err
	}

	*o = UserRoleSpecification(varUserRoleSpecification)

	return err
}

type NullableUserRoleSpecification struct {
	value *UserRoleSpecification
	isSet bool
}

func (v NullableUserRoleSpecification) Get() *UserRoleSpecification {
	return v.value
}

func (v *NullableUserRoleSpecification) Set(val *UserRoleSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRoleSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRoleSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRoleSpecification(val *UserRoleSpecification) *NullableUserRoleSpecification {
	return &NullableUserRoleSpecification{value: val, isSet: true}
}

func (v NullableUserRoleSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRoleSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


