/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ToolMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolMetadata{}

// ToolMetadata The manifest for a tool that can be used to augment Glean Assistant.
type ToolMetadata struct {
	// The type of tool.
	Type string `json:"type"`
	// Unique identifier for the tool. Name should be understandable by the LLM, and will be used to invoke a tool.
	Name string `json:"name"`
	// Human understandable name of the tool. Max 50 characters.
	DisplayName string `json:"displayName"`
	// An opaque id which is unique identifier for the tool.
	ToolId *string `json:"toolId,omitempty"`
	// Description of the tool meant for a human.
	DisplayDescription string `json:"displayDescription"`
	// URL used to fetch the logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// Name of the generated object. This will be used to indicate to the end user what the generated object contains.
	ObjectName *string `json:"objectName,omitempty"`
	CreatedBy *PersonObject `json:"createdBy,omitempty"`
	LastUpdatedBy *PersonObject `json:"lastUpdatedBy,omitempty"`
	// The time the tool was created in ISO format (ISO 8601)
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The time the tool was last updated in ISO format (ISO 8601)
	LastUpdatedAt *time.Time `json:"lastUpdatedAt,omitempty"`
	Auth *AuthConfig `json:"auth,omitempty"`
}

type _ToolMetadata ToolMetadata

// NewToolMetadata instantiates a new ToolMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolMetadata(type_ string, name string, displayName string, displayDescription string) *ToolMetadata {
	this := ToolMetadata{}
	this.Type = type_
	this.Name = name
	this.DisplayName = displayName
	this.DisplayDescription = displayDescription
	return &this
}

// NewToolMetadataWithDefaults instantiates a new ToolMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolMetadataWithDefaults() *ToolMetadata {
	this := ToolMetadata{}
	return &this
}

// GetType returns the Type field value
func (o *ToolMetadata) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ToolMetadata) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *ToolMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ToolMetadata) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *ToolMetadata) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ToolMetadata) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetToolId returns the ToolId field value if set, zero value otherwise.
func (o *ToolMetadata) GetToolId() string {
	if o == nil || IsNil(o.ToolId) {
		var ret string
		return ret
	}
	return *o.ToolId
}

// GetToolIdOk returns a tuple with the ToolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetToolIdOk() (*string, bool) {
	if o == nil || IsNil(o.ToolId) {
		return nil, false
	}
	return o.ToolId, true
}

// HasToolId returns a boolean if a field has been set.
func (o *ToolMetadata) HasToolId() bool {
	if o != nil && !IsNil(o.ToolId) {
		return true
	}

	return false
}

// SetToolId gets a reference to the given string and assigns it to the ToolId field.
func (o *ToolMetadata) SetToolId(v string) {
	o.ToolId = &v
}

// GetDisplayDescription returns the DisplayDescription field value
func (o *ToolMetadata) GetDisplayDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayDescription
}

// GetDisplayDescriptionOk returns a tuple with the DisplayDescription field value
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetDisplayDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayDescription, true
}

// SetDisplayDescription sets field value
func (o *ToolMetadata) SetDisplayDescription(v string) {
	o.DisplayDescription = v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *ToolMetadata) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *ToolMetadata) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *ToolMetadata) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *ToolMetadata) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName) {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectName) {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *ToolMetadata) HasObjectName() bool {
	if o != nil && !IsNil(o.ObjectName) {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *ToolMetadata) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ToolMetadata) GetCreatedBy() PersonObject {
	if o == nil || IsNil(o.CreatedBy) {
		var ret PersonObject
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetCreatedByOk() (*PersonObject, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ToolMetadata) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given PersonObject and assigns it to the CreatedBy field.
func (o *ToolMetadata) SetCreatedBy(v PersonObject) {
	o.CreatedBy = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *ToolMetadata) GetLastUpdatedBy() PersonObject {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret PersonObject
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetLastUpdatedByOk() (*PersonObject, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *ToolMetadata) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given PersonObject and assigns it to the LastUpdatedBy field.
func (o *ToolMetadata) SetLastUpdatedBy(v PersonObject) {
	o.LastUpdatedBy = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ToolMetadata) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ToolMetadata) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ToolMetadata) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value if set, zero value otherwise.
func (o *ToolMetadata) GetLastUpdatedAt() time.Time {
	if o == nil || IsNil(o.LastUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetLastUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAt) {
		return nil, false
	}
	return o.LastUpdatedAt, true
}

// HasLastUpdatedAt returns a boolean if a field has been set.
func (o *ToolMetadata) HasLastUpdatedAt() bool {
	if o != nil && !IsNil(o.LastUpdatedAt) {
		return true
	}

	return false
}

// SetLastUpdatedAt gets a reference to the given time.Time and assigns it to the LastUpdatedAt field.
func (o *ToolMetadata) SetLastUpdatedAt(v time.Time) {
	o.LastUpdatedAt = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *ToolMetadata) GetAuth() AuthConfig {
	if o == nil || IsNil(o.Auth) {
		var ret AuthConfig
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMetadata) GetAuthOk() (*AuthConfig, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *ToolMetadata) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given AuthConfig and assigns it to the Auth field.
func (o *ToolMetadata) SetAuth(v AuthConfig) {
	o.Auth = &v
}

func (o ToolMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.ToolId) {
		toSerialize["toolId"] = o.ToolId
	}
	toSerialize["displayDescription"] = o.DisplayDescription
	if !IsNil(o.LogoUrl) {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if !IsNil(o.ObjectName) {
		toSerialize["objectName"] = o.ObjectName
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.LastUpdatedAt) {
		toSerialize["lastUpdatedAt"] = o.LastUpdatedAt
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	return toSerialize, nil
}

func (o *ToolMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"displayName",
		"displayDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolMetadata := _ToolMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolMetadata)

	if err != nil {
		return err
	}

	*o = ToolMetadata(varToolMetadata)

	return err
}

type NullableToolMetadata struct {
	value *ToolMetadata
	isSet bool
}

func (v NullableToolMetadata) Get() *ToolMetadata {
	return v.value
}

func (v *NullableToolMetadata) Set(val *ToolMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableToolMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableToolMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolMetadata(val *ToolMetadata) *NullableToolMetadata {
	return &NullableToolMetadata{value: val, isSet: true}
}

func (v NullableToolMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


