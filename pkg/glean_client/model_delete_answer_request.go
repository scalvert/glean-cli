/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteAnswerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteAnswerRequest{}

// DeleteAnswerRequest struct for DeleteAnswerRequest
type DeleteAnswerRequest struct {
	// The opaque ID of the Answer.
	Id int32 `json:"id"`
	// Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
	DocId *string `json:"docId,omitempty"`
}

type _DeleteAnswerRequest DeleteAnswerRequest

// NewDeleteAnswerRequest instantiates a new DeleteAnswerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteAnswerRequest(id int32) *DeleteAnswerRequest {
	this := DeleteAnswerRequest{}
	this.Id = id
	return &this
}

// NewDeleteAnswerRequestWithDefaults instantiates a new DeleteAnswerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteAnswerRequestWithDefaults() *DeleteAnswerRequest {
	this := DeleteAnswerRequest{}
	return &this
}

// GetId returns the Id field value
func (o *DeleteAnswerRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeleteAnswerRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeleteAnswerRequest) SetId(v int32) {
	o.Id = v
}

// GetDocId returns the DocId field value if set, zero value otherwise.
func (o *DeleteAnswerRequest) GetDocId() string {
	if o == nil || IsNil(o.DocId) {
		var ret string
		return ret
	}
	return *o.DocId
}

// GetDocIdOk returns a tuple with the DocId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteAnswerRequest) GetDocIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocId) {
		return nil, false
	}
	return o.DocId, true
}

// HasDocId returns a boolean if a field has been set.
func (o *DeleteAnswerRequest) HasDocId() bool {
	if o != nil && !IsNil(o.DocId) {
		return true
	}

	return false
}

// SetDocId gets a reference to the given string and assigns it to the DocId field.
func (o *DeleteAnswerRequest) SetDocId(v string) {
	o.DocId = &v
}

func (o DeleteAnswerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteAnswerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.DocId) {
		toSerialize["docId"] = o.DocId
	}
	return toSerialize, nil
}

func (o *DeleteAnswerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteAnswerRequest := _DeleteAnswerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteAnswerRequest)

	if err != nil {
		return err
	}

	*o = DeleteAnswerRequest(varDeleteAnswerRequest)

	return err
}

type NullableDeleteAnswerRequest struct {
	value *DeleteAnswerRequest
	isSet bool
}

func (v NullableDeleteAnswerRequest) Get() *DeleteAnswerRequest {
	return v.value
}

func (v *NullableDeleteAnswerRequest) Set(val *DeleteAnswerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteAnswerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteAnswerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteAnswerRequest(val *DeleteAnswerRequest) *NullableDeleteAnswerRequest {
	return &NullableDeleteAnswerRequest{value: val, isSet: true}
}

func (v NullableDeleteAnswerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteAnswerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


