/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomFieldData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomFieldData{}

// CustomFieldData struct for CustomFieldData
type CustomFieldData struct {
	// A user-facing label for this field.
	Label string `json:"label"`
	Values []CustomFieldValue `json:"values"`
	// Determines whether the client should display this custom field
	Displayable bool `json:"displayable"`
}

type _CustomFieldData CustomFieldData

// NewCustomFieldData instantiates a new CustomFieldData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFieldData(label string, values []CustomFieldValue, displayable bool) *CustomFieldData {
	this := CustomFieldData{}
	this.Label = label
	this.Values = values
	this.Displayable = displayable
	return &this
}

// NewCustomFieldDataWithDefaults instantiates a new CustomFieldData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldDataWithDefaults() *CustomFieldData {
	this := CustomFieldData{}
	var displayable bool = true
	this.Displayable = displayable
	return &this
}

// GetLabel returns the Label field value
func (o *CustomFieldData) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CustomFieldData) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CustomFieldData) SetLabel(v string) {
	o.Label = v
}

// GetValues returns the Values field value
func (o *CustomFieldData) GetValues() []CustomFieldValue {
	if o == nil {
		var ret []CustomFieldValue
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *CustomFieldData) GetValuesOk() ([]CustomFieldValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *CustomFieldData) SetValues(v []CustomFieldValue) {
	o.Values = v
}

// GetDisplayable returns the Displayable field value
func (o *CustomFieldData) GetDisplayable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Displayable
}

// GetDisplayableOk returns a tuple with the Displayable field value
// and a boolean to check if the value has been set.
func (o *CustomFieldData) GetDisplayableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Displayable, true
}

// SetDisplayable sets field value
func (o *CustomFieldData) SetDisplayable(v bool) {
	o.Displayable = v
}

func (o CustomFieldData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFieldData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["values"] = o.Values
	toSerialize["displayable"] = o.Displayable
	return toSerialize, nil
}

func (o *CustomFieldData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"values",
		"displayable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomFieldData := _CustomFieldData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomFieldData)

	if err != nil {
		return err
	}

	*o = CustomFieldData(varCustomFieldData)

	return err
}

type NullableCustomFieldData struct {
	value *CustomFieldData
	isSet bool
}

func (v NullableCustomFieldData) Get() *CustomFieldData {
	return v.value
}

func (v *NullableCustomFieldData) Set(val *CustomFieldData) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldData) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldData(val *CustomFieldData) *NullableCustomFieldData {
	return &NullableCustomFieldData{value: val, isSet: true}
}

func (v NullableCustomFieldData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


