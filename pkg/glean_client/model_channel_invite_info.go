/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"time"
)

// checks if the ChannelInviteInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelInviteInfo{}

// ChannelInviteInfo Information regarding the invite status of a person for a particular channel.
type ChannelInviteInfo struct {
	Channel *CommunicationChannel `json:"channel,omitempty"`
	// Bit that tracks if this invite was automatically sent or user-sent
	IsAutoInvite *bool `json:"isAutoInvite,omitempty"`
	Inviter *Person `json:"inviter,omitempty"`
	// The time this person was invited in ISO format (ISO 8601).
	InviteTime *time.Time `json:"inviteTime,omitempty"`
	// The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
	ReminderTime *time.Time `json:"reminderTime,omitempty"`
}

// NewChannelInviteInfo instantiates a new ChannelInviteInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelInviteInfo() *ChannelInviteInfo {
	this := ChannelInviteInfo{}
	return &this
}

// NewChannelInviteInfoWithDefaults instantiates a new ChannelInviteInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelInviteInfoWithDefaults() *ChannelInviteInfo {
	this := ChannelInviteInfo{}
	return &this
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *ChannelInviteInfo) GetChannel() CommunicationChannel {
	if o == nil || IsNil(o.Channel) {
		var ret CommunicationChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInviteInfo) GetChannelOk() (*CommunicationChannel, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *ChannelInviteInfo) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given CommunicationChannel and assigns it to the Channel field.
func (o *ChannelInviteInfo) SetChannel(v CommunicationChannel) {
	o.Channel = &v
}

// GetIsAutoInvite returns the IsAutoInvite field value if set, zero value otherwise.
func (o *ChannelInviteInfo) GetIsAutoInvite() bool {
	if o == nil || IsNil(o.IsAutoInvite) {
		var ret bool
		return ret
	}
	return *o.IsAutoInvite
}

// GetIsAutoInviteOk returns a tuple with the IsAutoInvite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInviteInfo) GetIsAutoInviteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoInvite) {
		return nil, false
	}
	return o.IsAutoInvite, true
}

// HasIsAutoInvite returns a boolean if a field has been set.
func (o *ChannelInviteInfo) HasIsAutoInvite() bool {
	if o != nil && !IsNil(o.IsAutoInvite) {
		return true
	}

	return false
}

// SetIsAutoInvite gets a reference to the given bool and assigns it to the IsAutoInvite field.
func (o *ChannelInviteInfo) SetIsAutoInvite(v bool) {
	o.IsAutoInvite = &v
}

// GetInviter returns the Inviter field value if set, zero value otherwise.
func (o *ChannelInviteInfo) GetInviter() Person {
	if o == nil || IsNil(o.Inviter) {
		var ret Person
		return ret
	}
	return *o.Inviter
}

// GetInviterOk returns a tuple with the Inviter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInviteInfo) GetInviterOk() (*Person, bool) {
	if o == nil || IsNil(o.Inviter) {
		return nil, false
	}
	return o.Inviter, true
}

// HasInviter returns a boolean if a field has been set.
func (o *ChannelInviteInfo) HasInviter() bool {
	if o != nil && !IsNil(o.Inviter) {
		return true
	}

	return false
}

// SetInviter gets a reference to the given Person and assigns it to the Inviter field.
func (o *ChannelInviteInfo) SetInviter(v Person) {
	o.Inviter = &v
}

// GetInviteTime returns the InviteTime field value if set, zero value otherwise.
func (o *ChannelInviteInfo) GetInviteTime() time.Time {
	if o == nil || IsNil(o.InviteTime) {
		var ret time.Time
		return ret
	}
	return *o.InviteTime
}

// GetInviteTimeOk returns a tuple with the InviteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInviteInfo) GetInviteTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.InviteTime) {
		return nil, false
	}
	return o.InviteTime, true
}

// HasInviteTime returns a boolean if a field has been set.
func (o *ChannelInviteInfo) HasInviteTime() bool {
	if o != nil && !IsNil(o.InviteTime) {
		return true
	}

	return false
}

// SetInviteTime gets a reference to the given time.Time and assigns it to the InviteTime field.
func (o *ChannelInviteInfo) SetInviteTime(v time.Time) {
	o.InviteTime = &v
}

// GetReminderTime returns the ReminderTime field value if set, zero value otherwise.
func (o *ChannelInviteInfo) GetReminderTime() time.Time {
	if o == nil || IsNil(o.ReminderTime) {
		var ret time.Time
		return ret
	}
	return *o.ReminderTime
}

// GetReminderTimeOk returns a tuple with the ReminderTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInviteInfo) GetReminderTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReminderTime) {
		return nil, false
	}
	return o.ReminderTime, true
}

// HasReminderTime returns a boolean if a field has been set.
func (o *ChannelInviteInfo) HasReminderTime() bool {
	if o != nil && !IsNil(o.ReminderTime) {
		return true
	}

	return false
}

// SetReminderTime gets a reference to the given time.Time and assigns it to the ReminderTime field.
func (o *ChannelInviteInfo) SetReminderTime(v time.Time) {
	o.ReminderTime = &v
}

func (o ChannelInviteInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelInviteInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.IsAutoInvite) {
		toSerialize["isAutoInvite"] = o.IsAutoInvite
	}
	if !IsNil(o.Inviter) {
		toSerialize["inviter"] = o.Inviter
	}
	if !IsNil(o.InviteTime) {
		toSerialize["inviteTime"] = o.InviteTime
	}
	if !IsNil(o.ReminderTime) {
		toSerialize["reminderTime"] = o.ReminderTime
	}
	return toSerialize, nil
}

type NullableChannelInviteInfo struct {
	value *ChannelInviteInfo
	isSet bool
}

func (v NullableChannelInviteInfo) Get() *ChannelInviteInfo {
	return v.value
}

func (v *NullableChannelInviteInfo) Set(val *ChannelInviteInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelInviteInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelInviteInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelInviteInfo(val *ChannelInviteInfo) *NullableChannelInviteInfo {
	return &NullableChannelInviteInfo{value: val, isSet: true}
}

func (v NullableChannelInviteInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelInviteInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


