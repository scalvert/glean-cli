/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the ClientConfigBrandings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientConfigBrandings{}

// ClientConfigBrandings Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
type ClientConfigBrandings struct {
	Light *Branding `json:"light,omitempty"`
	Dark *Branding `json:"dark,omitempty"`
	ProductTerms *ProductTerms `json:"productTerms,omitempty"`
}

// NewClientConfigBrandings instantiates a new ClientConfigBrandings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientConfigBrandings() *ClientConfigBrandings {
	this := ClientConfigBrandings{}
	return &this
}

// NewClientConfigBrandingsWithDefaults instantiates a new ClientConfigBrandings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientConfigBrandingsWithDefaults() *ClientConfigBrandings {
	this := ClientConfigBrandings{}
	return &this
}

// GetLight returns the Light field value if set, zero value otherwise.
func (o *ClientConfigBrandings) GetLight() Branding {
	if o == nil || IsNil(o.Light) {
		var ret Branding
		return ret
	}
	return *o.Light
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConfigBrandings) GetLightOk() (*Branding, bool) {
	if o == nil || IsNil(o.Light) {
		return nil, false
	}
	return o.Light, true
}

// HasLight returns a boolean if a field has been set.
func (o *ClientConfigBrandings) HasLight() bool {
	if o != nil && !IsNil(o.Light) {
		return true
	}

	return false
}

// SetLight gets a reference to the given Branding and assigns it to the Light field.
func (o *ClientConfigBrandings) SetLight(v Branding) {
	o.Light = &v
}

// GetDark returns the Dark field value if set, zero value otherwise.
func (o *ClientConfigBrandings) GetDark() Branding {
	if o == nil || IsNil(o.Dark) {
		var ret Branding
		return ret
	}
	return *o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConfigBrandings) GetDarkOk() (*Branding, bool) {
	if o == nil || IsNil(o.Dark) {
		return nil, false
	}
	return o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *ClientConfigBrandings) HasDark() bool {
	if o != nil && !IsNil(o.Dark) {
		return true
	}

	return false
}

// SetDark gets a reference to the given Branding and assigns it to the Dark field.
func (o *ClientConfigBrandings) SetDark(v Branding) {
	o.Dark = &v
}

// GetProductTerms returns the ProductTerms field value if set, zero value otherwise.
func (o *ClientConfigBrandings) GetProductTerms() ProductTerms {
	if o == nil || IsNil(o.ProductTerms) {
		var ret ProductTerms
		return ret
	}
	return *o.ProductTerms
}

// GetProductTermsOk returns a tuple with the ProductTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConfigBrandings) GetProductTermsOk() (*ProductTerms, bool) {
	if o == nil || IsNil(o.ProductTerms) {
		return nil, false
	}
	return o.ProductTerms, true
}

// HasProductTerms returns a boolean if a field has been set.
func (o *ClientConfigBrandings) HasProductTerms() bool {
	if o != nil && !IsNil(o.ProductTerms) {
		return true
	}

	return false
}

// SetProductTerms gets a reference to the given ProductTerms and assigns it to the ProductTerms field.
func (o *ClientConfigBrandings) SetProductTerms(v ProductTerms) {
	o.ProductTerms = &v
}

func (o ClientConfigBrandings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientConfigBrandings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Light) {
		toSerialize["light"] = o.Light
	}
	if !IsNil(o.Dark) {
		toSerialize["dark"] = o.Dark
	}
	if !IsNil(o.ProductTerms) {
		toSerialize["productTerms"] = o.ProductTerms
	}
	return toSerialize, nil
}

type NullableClientConfigBrandings struct {
	value *ClientConfigBrandings
	isSet bool
}

func (v NullableClientConfigBrandings) Get() *ClientConfigBrandings {
	return v.value
}

func (v *NullableClientConfigBrandings) Set(val *ClientConfigBrandings) {
	v.value = val
	v.isSet = true
}

func (v NullableClientConfigBrandings) IsSet() bool {
	return v.isSet
}

func (v *NullableClientConfigBrandings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientConfigBrandings(val *ClientConfigBrandings) *NullableClientConfigBrandings {
	return &NullableClientConfigBrandings{value: val, isSet: true}
}

func (v NullableClientConfigBrandings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientConfigBrandings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


