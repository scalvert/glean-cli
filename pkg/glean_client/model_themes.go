/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the Themes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Themes{}

// Themes A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
type Themes struct {
	// A map of {string, string} pairs where the key represents a known theme option and the value is the CSS color to apply. Supported options are documented in https://dev.glean.com/meta/browser_api/interfaces/Theme.html.
	Light *map[string]string `json:"light,omitempty"`
	// A map of {string, string} pairs where the key represents a known theme option and the value is the CSS color to apply. Supported options are documented in https://dev.glean.com/meta/browser_api/interfaces/Theme.html.
	Dark *map[string]string `json:"dark,omitempty"`
}

// NewThemes instantiates a new Themes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThemes() *Themes {
	this := Themes{}
	return &this
}

// NewThemesWithDefaults instantiates a new Themes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThemesWithDefaults() *Themes {
	this := Themes{}
	return &this
}

// GetLight returns the Light field value if set, zero value otherwise.
func (o *Themes) GetLight() map[string]string {
	if o == nil || IsNil(o.Light) {
		var ret map[string]string
		return ret
	}
	return *o.Light
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Themes) GetLightOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Light) {
		return nil, false
	}
	return o.Light, true
}

// HasLight returns a boolean if a field has been set.
func (o *Themes) HasLight() bool {
	if o != nil && !IsNil(o.Light) {
		return true
	}

	return false
}

// SetLight gets a reference to the given map[string]string and assigns it to the Light field.
func (o *Themes) SetLight(v map[string]string) {
	o.Light = &v
}

// GetDark returns the Dark field value if set, zero value otherwise.
func (o *Themes) GetDark() map[string]string {
	if o == nil || IsNil(o.Dark) {
		var ret map[string]string
		return ret
	}
	return *o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Themes) GetDarkOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Dark) {
		return nil, false
	}
	return o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *Themes) HasDark() bool {
	if o != nil && !IsNil(o.Dark) {
		return true
	}

	return false
}

// SetDark gets a reference to the given map[string]string and assigns it to the Dark field.
func (o *Themes) SetDark(v map[string]string) {
	o.Dark = &v
}

func (o Themes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Themes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Light) {
		toSerialize["light"] = o.Light
	}
	if !IsNil(o.Dark) {
		toSerialize["dark"] = o.Dark
	}
	return toSerialize, nil
}

type NullableThemes struct {
	value *Themes
	isSet bool
}

func (v NullableThemes) Get() *Themes {
	return v.value
}

func (v *NullableThemes) Set(val *Themes) {
	v.value = val
	v.isSet = true
}

func (v NullableThemes) IsSet() bool {
	return v.isSet
}

func (v *NullableThemes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThemes(val *Themes) *NullableThemes {
	return &NullableThemes{value: val, isSet: true}
}

func (v NullableThemes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThemes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


