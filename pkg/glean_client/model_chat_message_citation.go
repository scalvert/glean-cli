/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the ChatMessageCitation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatMessageCitation{}

// ChatMessageCitation Information about the source for a ChatMessage.
type ChatMessageCitation struct {
	// An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
	SourceDocument *Document `json:"sourceDocument,omitempty"`
	SourcePerson *Person `json:"sourcePerson,omitempty"`
	// Each reference range and its corresponding snippets
	ReferenceRanges []ReferenceRange `json:"referenceRanges,omitempty"`
}

// NewChatMessageCitation instantiates a new ChatMessageCitation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMessageCitation() *ChatMessageCitation {
	this := ChatMessageCitation{}
	return &this
}

// NewChatMessageCitationWithDefaults instantiates a new ChatMessageCitation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMessageCitationWithDefaults() *ChatMessageCitation {
	this := ChatMessageCitation{}
	return &this
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *ChatMessageCitation) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessageCitation) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *ChatMessageCitation) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *ChatMessageCitation) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

// GetSourceDocument returns the SourceDocument field value if set, zero value otherwise.
func (o *ChatMessageCitation) GetSourceDocument() Document {
	if o == nil || IsNil(o.SourceDocument) {
		var ret Document
		return ret
	}
	return *o.SourceDocument
}

// GetSourceDocumentOk returns a tuple with the SourceDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessageCitation) GetSourceDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.SourceDocument) {
		return nil, false
	}
	return o.SourceDocument, true
}

// HasSourceDocument returns a boolean if a field has been set.
func (o *ChatMessageCitation) HasSourceDocument() bool {
	if o != nil && !IsNil(o.SourceDocument) {
		return true
	}

	return false
}

// SetSourceDocument gets a reference to the given Document and assigns it to the SourceDocument field.
func (o *ChatMessageCitation) SetSourceDocument(v Document) {
	o.SourceDocument = &v
}

// GetSourcePerson returns the SourcePerson field value if set, zero value otherwise.
func (o *ChatMessageCitation) GetSourcePerson() Person {
	if o == nil || IsNil(o.SourcePerson) {
		var ret Person
		return ret
	}
	return *o.SourcePerson
}

// GetSourcePersonOk returns a tuple with the SourcePerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessageCitation) GetSourcePersonOk() (*Person, bool) {
	if o == nil || IsNil(o.SourcePerson) {
		return nil, false
	}
	return o.SourcePerson, true
}

// HasSourcePerson returns a boolean if a field has been set.
func (o *ChatMessageCitation) HasSourcePerson() bool {
	if o != nil && !IsNil(o.SourcePerson) {
		return true
	}

	return false
}

// SetSourcePerson gets a reference to the given Person and assigns it to the SourcePerson field.
func (o *ChatMessageCitation) SetSourcePerson(v Person) {
	o.SourcePerson = &v
}

// GetReferenceRanges returns the ReferenceRanges field value if set, zero value otherwise.
func (o *ChatMessageCitation) GetReferenceRanges() []ReferenceRange {
	if o == nil || IsNil(o.ReferenceRanges) {
		var ret []ReferenceRange
		return ret
	}
	return o.ReferenceRanges
}

// GetReferenceRangesOk returns a tuple with the ReferenceRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessageCitation) GetReferenceRangesOk() ([]ReferenceRange, bool) {
	if o == nil || IsNil(o.ReferenceRanges) {
		return nil, false
	}
	return o.ReferenceRanges, true
}

// HasReferenceRanges returns a boolean if a field has been set.
func (o *ChatMessageCitation) HasReferenceRanges() bool {
	if o != nil && !IsNil(o.ReferenceRanges) {
		return true
	}

	return false
}

// SetReferenceRanges gets a reference to the given []ReferenceRange and assigns it to the ReferenceRanges field.
func (o *ChatMessageCitation) SetReferenceRanges(v []ReferenceRange) {
	o.ReferenceRanges = v
}

func (o ChatMessageCitation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatMessageCitation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	if !IsNil(o.SourceDocument) {
		toSerialize["sourceDocument"] = o.SourceDocument
	}
	if !IsNil(o.SourcePerson) {
		toSerialize["sourcePerson"] = o.SourcePerson
	}
	if !IsNil(o.ReferenceRanges) {
		toSerialize["referenceRanges"] = o.ReferenceRanges
	}
	return toSerialize, nil
}

type NullableChatMessageCitation struct {
	value *ChatMessageCitation
	isSet bool
}

func (v NullableChatMessageCitation) Get() *ChatMessageCitation {
	return v.value
}

func (v *NullableChatMessageCitation) Set(val *ChatMessageCitation) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMessageCitation) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMessageCitation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMessageCitation(val *ChatMessageCitation) *NullableChatMessageCitation {
	return &NullableChatMessageCitation{value: val, isSet: true}
}

func (v NullableChatMessageCitation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMessageCitation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


