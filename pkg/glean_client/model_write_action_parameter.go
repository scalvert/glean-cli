/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the WriteActionParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WriteActionParameter{}

// WriteActionParameter struct for WriteActionParameter
type WriteActionParameter struct {
	// The type of the value (e.g., integer, string, etc.)
	Type *string `json:"type,omitempty"`
	// The value of the field.
	Value *string `json:"value,omitempty"`
	// Is the parameter a required field.
	IsRequired *bool `json:"isRequired,omitempty"`
	// Description of the parameter.
	Description *string `json:"description,omitempty"`
	// Possible values that the parameter can take.
	PossibleValues []PossibleValue `json:"possibleValues,omitempty"`
}

// NewWriteActionParameter instantiates a new WriteActionParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWriteActionParameter() *WriteActionParameter {
	this := WriteActionParameter{}
	return &this
}

// NewWriteActionParameterWithDefaults instantiates a new WriteActionParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWriteActionParameterWithDefaults() *WriteActionParameter {
	this := WriteActionParameter{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WriteActionParameter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteActionParameter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WriteActionParameter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WriteActionParameter) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *WriteActionParameter) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteActionParameter) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *WriteActionParameter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *WriteActionParameter) SetValue(v string) {
	o.Value = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *WriteActionParameter) GetIsRequired() bool {
	if o == nil || IsNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteActionParameter) GetIsRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequired) {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *WriteActionParameter) HasIsRequired() bool {
	if o != nil && !IsNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *WriteActionParameter) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WriteActionParameter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteActionParameter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WriteActionParameter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WriteActionParameter) SetDescription(v string) {
	o.Description = &v
}

// GetPossibleValues returns the PossibleValues field value if set, zero value otherwise.
func (o *WriteActionParameter) GetPossibleValues() []PossibleValue {
	if o == nil || IsNil(o.PossibleValues) {
		var ret []PossibleValue
		return ret
	}
	return o.PossibleValues
}

// GetPossibleValuesOk returns a tuple with the PossibleValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteActionParameter) GetPossibleValuesOk() ([]PossibleValue, bool) {
	if o == nil || IsNil(o.PossibleValues) {
		return nil, false
	}
	return o.PossibleValues, true
}

// HasPossibleValues returns a boolean if a field has been set.
func (o *WriteActionParameter) HasPossibleValues() bool {
	if o != nil && !IsNil(o.PossibleValues) {
		return true
	}

	return false
}

// SetPossibleValues gets a reference to the given []PossibleValue and assigns it to the PossibleValues field.
func (o *WriteActionParameter) SetPossibleValues(v []PossibleValue) {
	o.PossibleValues = v
}

func (o WriteActionParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WriteActionParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.IsRequired) {
		toSerialize["isRequired"] = o.IsRequired
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.PossibleValues) {
		toSerialize["possibleValues"] = o.PossibleValues
	}
	return toSerialize, nil
}

type NullableWriteActionParameter struct {
	value *WriteActionParameter
	isSet bool
}

func (v NullableWriteActionParameter) Get() *WriteActionParameter {
	return v.value
}

func (v *NullableWriteActionParameter) Set(val *WriteActionParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteActionParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteActionParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteActionParameter(val *WriteActionParameter) *NullableWriteActionParameter {
	return &NullableWriteActionParameter{value: val, isSet: true}
}

func (v NullableWriteActionParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteActionParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


