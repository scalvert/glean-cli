/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CalendarEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarEvent{}

// CalendarEvent struct for CalendarEvent
type CalendarEvent struct {
	Time *TimeInterval `json:"time,omitempty"`
	// The nature of the event, for example \"out of office\".
	EventType *string `json:"eventType,omitempty"`
	// The calendar event id
	Id string `json:"id"`
	// A permalink for this calendar event
	Url string `json:"url"`
	Attendees *CalendarAttendees `json:"attendees,omitempty"`
	// The location that this event is taking place at.
	Location *string `json:"location,omitempty"`
	ConferenceData *ConferenceData `json:"conferenceData,omitempty"`
	// The HTML description of the event.
	Description *string `json:"description,omitempty"`
	// The app or other repository type from which the event was extracted
	Datasource *string `json:"datasource,omitempty"`
	Classifications []EventClassification `json:"classifications,omitempty"`
	GeneratedAttachments []GeneratedAttachment `json:"generatedAttachments,omitempty"`
}

type _CalendarEvent CalendarEvent

// NewCalendarEvent instantiates a new CalendarEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarEvent(id string, url string) *CalendarEvent {
	this := CalendarEvent{}
	this.Id = id
	this.Url = url
	return &this
}

// NewCalendarEventWithDefaults instantiates a new CalendarEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarEventWithDefaults() *CalendarEvent {
	this := CalendarEvent{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *CalendarEvent) GetTime() TimeInterval {
	if o == nil || IsNil(o.Time) {
		var ret TimeInterval
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetTimeOk() (*TimeInterval, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *CalendarEvent) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given TimeInterval and assigns it to the Time field.
func (o *CalendarEvent) SetTime(v TimeInterval) {
	o.Time = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CalendarEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CalendarEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *CalendarEvent) SetEventType(v string) {
	o.EventType = &v
}

// GetId returns the Id field value
func (o *CalendarEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CalendarEvent) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *CalendarEvent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CalendarEvent) SetUrl(v string) {
	o.Url = v
}

// GetAttendees returns the Attendees field value if set, zero value otherwise.
func (o *CalendarEvent) GetAttendees() CalendarAttendees {
	if o == nil || IsNil(o.Attendees) {
		var ret CalendarAttendees
		return ret
	}
	return *o.Attendees
}

// GetAttendeesOk returns a tuple with the Attendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetAttendeesOk() (*CalendarAttendees, bool) {
	if o == nil || IsNil(o.Attendees) {
		return nil, false
	}
	return o.Attendees, true
}

// HasAttendees returns a boolean if a field has been set.
func (o *CalendarEvent) HasAttendees() bool {
	if o != nil && !IsNil(o.Attendees) {
		return true
	}

	return false
}

// SetAttendees gets a reference to the given CalendarAttendees and assigns it to the Attendees field.
func (o *CalendarEvent) SetAttendees(v CalendarAttendees) {
	o.Attendees = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CalendarEvent) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CalendarEvent) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CalendarEvent) SetLocation(v string) {
	o.Location = &v
}

// GetConferenceData returns the ConferenceData field value if set, zero value otherwise.
func (o *CalendarEvent) GetConferenceData() ConferenceData {
	if o == nil || IsNil(o.ConferenceData) {
		var ret ConferenceData
		return ret
	}
	return *o.ConferenceData
}

// GetConferenceDataOk returns a tuple with the ConferenceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetConferenceDataOk() (*ConferenceData, bool) {
	if o == nil || IsNil(o.ConferenceData) {
		return nil, false
	}
	return o.ConferenceData, true
}

// HasConferenceData returns a boolean if a field has been set.
func (o *CalendarEvent) HasConferenceData() bool {
	if o != nil && !IsNil(o.ConferenceData) {
		return true
	}

	return false
}

// SetConferenceData gets a reference to the given ConferenceData and assigns it to the ConferenceData field.
func (o *CalendarEvent) SetConferenceData(v ConferenceData) {
	o.ConferenceData = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CalendarEvent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CalendarEvent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CalendarEvent) SetDescription(v string) {
	o.Description = &v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *CalendarEvent) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *CalendarEvent) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *CalendarEvent) SetDatasource(v string) {
	o.Datasource = &v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *CalendarEvent) GetClassifications() []EventClassification {
	if o == nil || IsNil(o.Classifications) {
		var ret []EventClassification
		return ret
	}
	return o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetClassificationsOk() ([]EventClassification, bool) {
	if o == nil || IsNil(o.Classifications) {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *CalendarEvent) HasClassifications() bool {
	if o != nil && !IsNil(o.Classifications) {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given []EventClassification and assigns it to the Classifications field.
func (o *CalendarEvent) SetClassifications(v []EventClassification) {
	o.Classifications = v
}

// GetGeneratedAttachments returns the GeneratedAttachments field value if set, zero value otherwise.
func (o *CalendarEvent) GetGeneratedAttachments() []GeneratedAttachment {
	if o == nil || IsNil(o.GeneratedAttachments) {
		var ret []GeneratedAttachment
		return ret
	}
	return o.GeneratedAttachments
}

// GetGeneratedAttachmentsOk returns a tuple with the GeneratedAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEvent) GetGeneratedAttachmentsOk() ([]GeneratedAttachment, bool) {
	if o == nil || IsNil(o.GeneratedAttachments) {
		return nil, false
	}
	return o.GeneratedAttachments, true
}

// HasGeneratedAttachments returns a boolean if a field has been set.
func (o *CalendarEvent) HasGeneratedAttachments() bool {
	if o != nil && !IsNil(o.GeneratedAttachments) {
		return true
	}

	return false
}

// SetGeneratedAttachments gets a reference to the given []GeneratedAttachment and assigns it to the GeneratedAttachments field.
func (o *CalendarEvent) SetGeneratedAttachments(v []GeneratedAttachment) {
	o.GeneratedAttachments = v
}

func (o CalendarEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	if !IsNil(o.Attendees) {
		toSerialize["attendees"] = o.Attendees
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.ConferenceData) {
		toSerialize["conferenceData"] = o.ConferenceData
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.Classifications) {
		toSerialize["classifications"] = o.Classifications
	}
	if !IsNil(o.GeneratedAttachments) {
		toSerialize["generatedAttachments"] = o.GeneratedAttachments
	}
	return toSerialize, nil
}

func (o *CalendarEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCalendarEvent := _CalendarEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCalendarEvent)

	if err != nil {
		return err
	}

	*o = CalendarEvent(varCalendarEvent)

	return err
}

type NullableCalendarEvent struct {
	value *CalendarEvent
	isSet bool
}

func (v NullableCalendarEvent) Get() *CalendarEvent {
	return v.value
}

func (v *NullableCalendarEvent) Set(val *CalendarEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarEvent(val *CalendarEvent) *NullableCalendarEvent {
	return &NullableCalendarEvent{value: val, isSet: true}
}

func (v NullableCalendarEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


