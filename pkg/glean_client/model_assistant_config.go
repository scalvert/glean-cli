/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the AssistantConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantConfig{}

// AssistantConfig Configuration settings specific to Assistant features
type AssistantConfig struct {
	// Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with \"\\n\" between each line.
	ChatBannerText *string `json:"chatBannerText,omitempty"`
	// Disclaimer message to be displayed below the chat box. This could be in markdown format.
	ChatBoxDisclaimer *string `json:"chatBoxDisclaimer,omitempty"`
	// The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
	ChatLinkUrlTemplate *string `json:"chatLinkUrlTemplate,omitempty"`
	// Label for the chat header during initial state.
	ChatStarterHeader *string `json:"chatStarterHeader,omitempty"`
	// Label for the chat subheader during initial state.
	ChatStarterSubheader *string `json:"chatStarterSubheader,omitempty"`
	AgentClientConfigs []AgentClientConfig `json:"agentClientConfigs,omitempty"`
	// A list of datasources that are disabled in Chat
	RedlistedDatasources []string `json:"redlistedDatasources,omitempty"`
	// A list of datasources that are always visible in Chat
	GreenlistedDatasourceInstances []string `json:"greenlistedDatasourceInstances,omitempty"`
	// Whether the GPT agent (general mode) for Chat is enabled
	GptAgentEnabled *bool `json:"gptAgentEnabled,omitempty"`
	// Whether the chat history for Chat is enabled for the deployment
	ChatHistoryEnabled *bool `json:"chatHistoryEnabled,omitempty"`
	// Redirect URL for \"Chat guide\" in the default chat starter subheader
	ChatGuideUrl *string `json:"chatGuideUrl,omitempty"`
}

// NewAssistantConfig instantiates a new AssistantConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantConfig() *AssistantConfig {
	this := AssistantConfig{}
	return &this
}

// NewAssistantConfigWithDefaults instantiates a new AssistantConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantConfigWithDefaults() *AssistantConfig {
	this := AssistantConfig{}
	return &this
}

// GetChatBannerText returns the ChatBannerText field value if set, zero value otherwise.
func (o *AssistantConfig) GetChatBannerText() string {
	if o == nil || IsNil(o.ChatBannerText) {
		var ret string
		return ret
	}
	return *o.ChatBannerText
}

// GetChatBannerTextOk returns a tuple with the ChatBannerText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetChatBannerTextOk() (*string, bool) {
	if o == nil || IsNil(o.ChatBannerText) {
		return nil, false
	}
	return o.ChatBannerText, true
}

// HasChatBannerText returns a boolean if a field has been set.
func (o *AssistantConfig) HasChatBannerText() bool {
	if o != nil && !IsNil(o.ChatBannerText) {
		return true
	}

	return false
}

// SetChatBannerText gets a reference to the given string and assigns it to the ChatBannerText field.
func (o *AssistantConfig) SetChatBannerText(v string) {
	o.ChatBannerText = &v
}

// GetChatBoxDisclaimer returns the ChatBoxDisclaimer field value if set, zero value otherwise.
func (o *AssistantConfig) GetChatBoxDisclaimer() string {
	if o == nil || IsNil(o.ChatBoxDisclaimer) {
		var ret string
		return ret
	}
	return *o.ChatBoxDisclaimer
}

// GetChatBoxDisclaimerOk returns a tuple with the ChatBoxDisclaimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetChatBoxDisclaimerOk() (*string, bool) {
	if o == nil || IsNil(o.ChatBoxDisclaimer) {
		return nil, false
	}
	return o.ChatBoxDisclaimer, true
}

// HasChatBoxDisclaimer returns a boolean if a field has been set.
func (o *AssistantConfig) HasChatBoxDisclaimer() bool {
	if o != nil && !IsNil(o.ChatBoxDisclaimer) {
		return true
	}

	return false
}

// SetChatBoxDisclaimer gets a reference to the given string and assigns it to the ChatBoxDisclaimer field.
func (o *AssistantConfig) SetChatBoxDisclaimer(v string) {
	o.ChatBoxDisclaimer = &v
}

// GetChatLinkUrlTemplate returns the ChatLinkUrlTemplate field value if set, zero value otherwise.
func (o *AssistantConfig) GetChatLinkUrlTemplate() string {
	if o == nil || IsNil(o.ChatLinkUrlTemplate) {
		var ret string
		return ret
	}
	return *o.ChatLinkUrlTemplate
}

// GetChatLinkUrlTemplateOk returns a tuple with the ChatLinkUrlTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetChatLinkUrlTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.ChatLinkUrlTemplate) {
		return nil, false
	}
	return o.ChatLinkUrlTemplate, true
}

// HasChatLinkUrlTemplate returns a boolean if a field has been set.
func (o *AssistantConfig) HasChatLinkUrlTemplate() bool {
	if o != nil && !IsNil(o.ChatLinkUrlTemplate) {
		return true
	}

	return false
}

// SetChatLinkUrlTemplate gets a reference to the given string and assigns it to the ChatLinkUrlTemplate field.
func (o *AssistantConfig) SetChatLinkUrlTemplate(v string) {
	o.ChatLinkUrlTemplate = &v
}

// GetChatStarterHeader returns the ChatStarterHeader field value if set, zero value otherwise.
func (o *AssistantConfig) GetChatStarterHeader() string {
	if o == nil || IsNil(o.ChatStarterHeader) {
		var ret string
		return ret
	}
	return *o.ChatStarterHeader
}

// GetChatStarterHeaderOk returns a tuple with the ChatStarterHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetChatStarterHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.ChatStarterHeader) {
		return nil, false
	}
	return o.ChatStarterHeader, true
}

// HasChatStarterHeader returns a boolean if a field has been set.
func (o *AssistantConfig) HasChatStarterHeader() bool {
	if o != nil && !IsNil(o.ChatStarterHeader) {
		return true
	}

	return false
}

// SetChatStarterHeader gets a reference to the given string and assigns it to the ChatStarterHeader field.
func (o *AssistantConfig) SetChatStarterHeader(v string) {
	o.ChatStarterHeader = &v
}

// GetChatStarterSubheader returns the ChatStarterSubheader field value if set, zero value otherwise.
func (o *AssistantConfig) GetChatStarterSubheader() string {
	if o == nil || IsNil(o.ChatStarterSubheader) {
		var ret string
		return ret
	}
	return *o.ChatStarterSubheader
}

// GetChatStarterSubheaderOk returns a tuple with the ChatStarterSubheader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetChatStarterSubheaderOk() (*string, bool) {
	if o == nil || IsNil(o.ChatStarterSubheader) {
		return nil, false
	}
	return o.ChatStarterSubheader, true
}

// HasChatStarterSubheader returns a boolean if a field has been set.
func (o *AssistantConfig) HasChatStarterSubheader() bool {
	if o != nil && !IsNil(o.ChatStarterSubheader) {
		return true
	}

	return false
}

// SetChatStarterSubheader gets a reference to the given string and assigns it to the ChatStarterSubheader field.
func (o *AssistantConfig) SetChatStarterSubheader(v string) {
	o.ChatStarterSubheader = &v
}

// GetAgentClientConfigs returns the AgentClientConfigs field value if set, zero value otherwise.
func (o *AssistantConfig) GetAgentClientConfigs() []AgentClientConfig {
	if o == nil || IsNil(o.AgentClientConfigs) {
		var ret []AgentClientConfig
		return ret
	}
	return o.AgentClientConfigs
}

// GetAgentClientConfigsOk returns a tuple with the AgentClientConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetAgentClientConfigsOk() ([]AgentClientConfig, bool) {
	if o == nil || IsNil(o.AgentClientConfigs) {
		return nil, false
	}
	return o.AgentClientConfigs, true
}

// HasAgentClientConfigs returns a boolean if a field has been set.
func (o *AssistantConfig) HasAgentClientConfigs() bool {
	if o != nil && !IsNil(o.AgentClientConfigs) {
		return true
	}

	return false
}

// SetAgentClientConfigs gets a reference to the given []AgentClientConfig and assigns it to the AgentClientConfigs field.
func (o *AssistantConfig) SetAgentClientConfigs(v []AgentClientConfig) {
	o.AgentClientConfigs = v
}

// GetRedlistedDatasources returns the RedlistedDatasources field value if set, zero value otherwise.
func (o *AssistantConfig) GetRedlistedDatasources() []string {
	if o == nil || IsNil(o.RedlistedDatasources) {
		var ret []string
		return ret
	}
	return o.RedlistedDatasources
}

// GetRedlistedDatasourcesOk returns a tuple with the RedlistedDatasources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetRedlistedDatasourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.RedlistedDatasources) {
		return nil, false
	}
	return o.RedlistedDatasources, true
}

// HasRedlistedDatasources returns a boolean if a field has been set.
func (o *AssistantConfig) HasRedlistedDatasources() bool {
	if o != nil && !IsNil(o.RedlistedDatasources) {
		return true
	}

	return false
}

// SetRedlistedDatasources gets a reference to the given []string and assigns it to the RedlistedDatasources field.
func (o *AssistantConfig) SetRedlistedDatasources(v []string) {
	o.RedlistedDatasources = v
}

// GetGreenlistedDatasourceInstances returns the GreenlistedDatasourceInstances field value if set, zero value otherwise.
func (o *AssistantConfig) GetGreenlistedDatasourceInstances() []string {
	if o == nil || IsNil(o.GreenlistedDatasourceInstances) {
		var ret []string
		return ret
	}
	return o.GreenlistedDatasourceInstances
}

// GetGreenlistedDatasourceInstancesOk returns a tuple with the GreenlistedDatasourceInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetGreenlistedDatasourceInstancesOk() ([]string, bool) {
	if o == nil || IsNil(o.GreenlistedDatasourceInstances) {
		return nil, false
	}
	return o.GreenlistedDatasourceInstances, true
}

// HasGreenlistedDatasourceInstances returns a boolean if a field has been set.
func (o *AssistantConfig) HasGreenlistedDatasourceInstances() bool {
	if o != nil && !IsNil(o.GreenlistedDatasourceInstances) {
		return true
	}

	return false
}

// SetGreenlistedDatasourceInstances gets a reference to the given []string and assigns it to the GreenlistedDatasourceInstances field.
func (o *AssistantConfig) SetGreenlistedDatasourceInstances(v []string) {
	o.GreenlistedDatasourceInstances = v
}

// GetGptAgentEnabled returns the GptAgentEnabled field value if set, zero value otherwise.
func (o *AssistantConfig) GetGptAgentEnabled() bool {
	if o == nil || IsNil(o.GptAgentEnabled) {
		var ret bool
		return ret
	}
	return *o.GptAgentEnabled
}

// GetGptAgentEnabledOk returns a tuple with the GptAgentEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetGptAgentEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GptAgentEnabled) {
		return nil, false
	}
	return o.GptAgentEnabled, true
}

// HasGptAgentEnabled returns a boolean if a field has been set.
func (o *AssistantConfig) HasGptAgentEnabled() bool {
	if o != nil && !IsNil(o.GptAgentEnabled) {
		return true
	}

	return false
}

// SetGptAgentEnabled gets a reference to the given bool and assigns it to the GptAgentEnabled field.
func (o *AssistantConfig) SetGptAgentEnabled(v bool) {
	o.GptAgentEnabled = &v
}

// GetChatHistoryEnabled returns the ChatHistoryEnabled field value if set, zero value otherwise.
func (o *AssistantConfig) GetChatHistoryEnabled() bool {
	if o == nil || IsNil(o.ChatHistoryEnabled) {
		var ret bool
		return ret
	}
	return *o.ChatHistoryEnabled
}

// GetChatHistoryEnabledOk returns a tuple with the ChatHistoryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetChatHistoryEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ChatHistoryEnabled) {
		return nil, false
	}
	return o.ChatHistoryEnabled, true
}

// HasChatHistoryEnabled returns a boolean if a field has been set.
func (o *AssistantConfig) HasChatHistoryEnabled() bool {
	if o != nil && !IsNil(o.ChatHistoryEnabled) {
		return true
	}

	return false
}

// SetChatHistoryEnabled gets a reference to the given bool and assigns it to the ChatHistoryEnabled field.
func (o *AssistantConfig) SetChatHistoryEnabled(v bool) {
	o.ChatHistoryEnabled = &v
}

// GetChatGuideUrl returns the ChatGuideUrl field value if set, zero value otherwise.
func (o *AssistantConfig) GetChatGuideUrl() string {
	if o == nil || IsNil(o.ChatGuideUrl) {
		var ret string
		return ret
	}
	return *o.ChatGuideUrl
}

// GetChatGuideUrlOk returns a tuple with the ChatGuideUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantConfig) GetChatGuideUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ChatGuideUrl) {
		return nil, false
	}
	return o.ChatGuideUrl, true
}

// HasChatGuideUrl returns a boolean if a field has been set.
func (o *AssistantConfig) HasChatGuideUrl() bool {
	if o != nil && !IsNil(o.ChatGuideUrl) {
		return true
	}

	return false
}

// SetChatGuideUrl gets a reference to the given string and assigns it to the ChatGuideUrl field.
func (o *AssistantConfig) SetChatGuideUrl(v string) {
	o.ChatGuideUrl = &v
}

func (o AssistantConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChatBannerText) {
		toSerialize["chatBannerText"] = o.ChatBannerText
	}
	if !IsNil(o.ChatBoxDisclaimer) {
		toSerialize["chatBoxDisclaimer"] = o.ChatBoxDisclaimer
	}
	if !IsNil(o.ChatLinkUrlTemplate) {
		toSerialize["chatLinkUrlTemplate"] = o.ChatLinkUrlTemplate
	}
	if !IsNil(o.ChatStarterHeader) {
		toSerialize["chatStarterHeader"] = o.ChatStarterHeader
	}
	if !IsNil(o.ChatStarterSubheader) {
		toSerialize["chatStarterSubheader"] = o.ChatStarterSubheader
	}
	if !IsNil(o.AgentClientConfigs) {
		toSerialize["agentClientConfigs"] = o.AgentClientConfigs
	}
	if !IsNil(o.RedlistedDatasources) {
		toSerialize["redlistedDatasources"] = o.RedlistedDatasources
	}
	if !IsNil(o.GreenlistedDatasourceInstances) {
		toSerialize["greenlistedDatasourceInstances"] = o.GreenlistedDatasourceInstances
	}
	if !IsNil(o.GptAgentEnabled) {
		toSerialize["gptAgentEnabled"] = o.GptAgentEnabled
	}
	if !IsNil(o.ChatHistoryEnabled) {
		toSerialize["chatHistoryEnabled"] = o.ChatHistoryEnabled
	}
	if !IsNil(o.ChatGuideUrl) {
		toSerialize["chatGuideUrl"] = o.ChatGuideUrl
	}
	return toSerialize, nil
}

type NullableAssistantConfig struct {
	value *AssistantConfig
	isSet bool
}

func (v NullableAssistantConfig) Get() *AssistantConfig {
	return v.value
}

func (v *NullableAssistantConfig) Set(val *AssistantConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantConfig(val *AssistantConfig) *NullableAssistantConfig {
	return &NullableAssistantConfig{value: val, isSet: true}
}

func (v NullableAssistantConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


