/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the DisplayableListSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisplayableListSource{}

// DisplayableListSource struct for DisplayableListSource
type DisplayableListSource struct {
	// The type of data that backs this displayable list
	Source *string `json:"source,omitempty"`
}

// NewDisplayableListSource instantiates a new DisplayableListSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayableListSource() *DisplayableListSource {
	this := DisplayableListSource{}
	return &this
}

// NewDisplayableListSourceWithDefaults instantiates a new DisplayableListSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayableListSourceWithDefaults() *DisplayableListSource {
	this := DisplayableListSource{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DisplayableListSource) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListSource) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DisplayableListSource) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DisplayableListSource) SetSource(v string) {
	o.Source = &v
}

func (o DisplayableListSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisplayableListSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableDisplayableListSource struct {
	value *DisplayableListSource
	isSet bool
}

func (v NullableDisplayableListSource) Get() *DisplayableListSource {
	return v.value
}

func (v *NullableDisplayableListSource) Set(val *DisplayableListSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayableListSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayableListSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayableListSource(val *DisplayableListSource) *NullableDisplayableListSource {
	return &NullableDisplayableListSource{value: val, isSet: true}
}

func (v NullableDisplayableListSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayableListSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


