/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EditCollectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditCollectionRequest{}

// EditCollectionRequest struct for EditCollectionRequest
type EditCollectionRequest struct {
	// The unique name of the Collection.
	Name string `json:"name"`
	// A brief summary of the Collection's contents.
	Description *string `json:"description,omitempty"`
	// A list of added user roles for the Collection.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of removed user roles for the Collection.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	// Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// The emoji icon of this Collection.
	Icon *string `json:"icon,omitempty"`
	// Indicates whether edits are allowed for everyone or only admins.
	AdminLocked *bool `json:"adminLocked,omitempty"`
	// The parent of this Collection, or 0 if it's a top-level Collection.
	ParentId *int32 `json:"parentId,omitempty"`
	Thumbnail *Thumbnail `json:"thumbnail,omitempty"`
	// The datasource type this Collection can hold.
	AllowedDatasource *string `json:"allowedDatasource,omitempty"`
	// The ID of the Collection to modify.
	Id int32 `json:"id"`
}

type _EditCollectionRequest EditCollectionRequest

// NewEditCollectionRequest instantiates a new EditCollectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditCollectionRequest(name string, id int32) *EditCollectionRequest {
	this := EditCollectionRequest{}
	this.Name = name
	this.Id = id
	return &this
}

// NewEditCollectionRequestWithDefaults instantiates a new EditCollectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditCollectionRequestWithDefaults() *EditCollectionRequest {
	this := EditCollectionRequest{}
	return &this
}

// GetName returns the Name field value
func (o *EditCollectionRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EditCollectionRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditCollectionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetAddedRoles returns the AddedRoles field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetAddedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.AddedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.AddedRoles
}

// GetAddedRolesOk returns a tuple with the AddedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetAddedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.AddedRoles) {
		return nil, false
	}
	return o.AddedRoles, true
}

// HasAddedRoles returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasAddedRoles() bool {
	if o != nil && !IsNil(o.AddedRoles) {
		return true
	}

	return false
}

// SetAddedRoles gets a reference to the given []UserRoleSpecification and assigns it to the AddedRoles field.
func (o *EditCollectionRequest) SetAddedRoles(v []UserRoleSpecification) {
	o.AddedRoles = v
}

// GetRemovedRoles returns the RemovedRoles field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetRemovedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.RemovedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.RemovedRoles
}

// GetRemovedRolesOk returns a tuple with the RemovedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetRemovedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.RemovedRoles) {
		return nil, false
	}
	return o.RemovedRoles, true
}

// HasRemovedRoles returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasRemovedRoles() bool {
	if o != nil && !IsNil(o.RemovedRoles) {
		return true
	}

	return false
}

// SetRemovedRoles gets a reference to the given []UserRoleSpecification and assigns it to the RemovedRoles field.
func (o *EditCollectionRequest) SetRemovedRoles(v []UserRoleSpecification) {
	o.RemovedRoles = v
}

// GetAudienceFilters returns the AudienceFilters field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetAudienceFilters() []FacetFilter {
	if o == nil || IsNil(o.AudienceFilters) {
		var ret []FacetFilter
		return ret
	}
	return o.AudienceFilters
}

// GetAudienceFiltersOk returns a tuple with the AudienceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetAudienceFiltersOk() ([]FacetFilter, bool) {
	if o == nil || IsNil(o.AudienceFilters) {
		return nil, false
	}
	return o.AudienceFilters, true
}

// HasAudienceFilters returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasAudienceFilters() bool {
	if o != nil && !IsNil(o.AudienceFilters) {
		return true
	}

	return false
}

// SetAudienceFilters gets a reference to the given []FacetFilter and assigns it to the AudienceFilters field.
func (o *EditCollectionRequest) SetAudienceFilters(v []FacetFilter) {
	o.AudienceFilters = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EditCollectionRequest) SetIcon(v string) {
	o.Icon = &v
}

// GetAdminLocked returns the AdminLocked field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetAdminLocked() bool {
	if o == nil || IsNil(o.AdminLocked) {
		var ret bool
		return ret
	}
	return *o.AdminLocked
}

// GetAdminLockedOk returns a tuple with the AdminLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetAdminLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminLocked) {
		return nil, false
	}
	return o.AdminLocked, true
}

// HasAdminLocked returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasAdminLocked() bool {
	if o != nil && !IsNil(o.AdminLocked) {
		return true
	}

	return false
}

// SetAdminLocked gets a reference to the given bool and assigns it to the AdminLocked field.
func (o *EditCollectionRequest) SetAdminLocked(v bool) {
	o.AdminLocked = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetParentId() int32 {
	if o == nil || IsNil(o.ParentId) {
		var ret int32
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetParentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int32 and assigns it to the ParentId field.
func (o *EditCollectionRequest) SetParentId(v int32) {
	o.ParentId = &v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetThumbnail() Thumbnail {
	if o == nil || IsNil(o.Thumbnail) {
		var ret Thumbnail
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetThumbnailOk() (*Thumbnail, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given Thumbnail and assigns it to the Thumbnail field.
func (o *EditCollectionRequest) SetThumbnail(v Thumbnail) {
	o.Thumbnail = &v
}

// GetAllowedDatasource returns the AllowedDatasource field value if set, zero value otherwise.
func (o *EditCollectionRequest) GetAllowedDatasource() string {
	if o == nil || IsNil(o.AllowedDatasource) {
		var ret string
		return ret
	}
	return *o.AllowedDatasource
}

// GetAllowedDatasourceOk returns a tuple with the AllowedDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetAllowedDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedDatasource) {
		return nil, false
	}
	return o.AllowedDatasource, true
}

// HasAllowedDatasource returns a boolean if a field has been set.
func (o *EditCollectionRequest) HasAllowedDatasource() bool {
	if o != nil && !IsNil(o.AllowedDatasource) {
		return true
	}

	return false
}

// SetAllowedDatasource gets a reference to the given string and assigns it to the AllowedDatasource field.
func (o *EditCollectionRequest) SetAllowedDatasource(v string) {
	o.AllowedDatasource = &v
}

// GetId returns the Id field value
func (o *EditCollectionRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EditCollectionRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EditCollectionRequest) SetId(v int32) {
	o.Id = v
}

func (o EditCollectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditCollectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AddedRoles) {
		toSerialize["addedRoles"] = o.AddedRoles
	}
	if !IsNil(o.RemovedRoles) {
		toSerialize["removedRoles"] = o.RemovedRoles
	}
	if !IsNil(o.AudienceFilters) {
		toSerialize["audienceFilters"] = o.AudienceFilters
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.AdminLocked) {
		toSerialize["adminLocked"] = o.AdminLocked
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	if !IsNil(o.AllowedDatasource) {
		toSerialize["allowedDatasource"] = o.AllowedDatasource
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *EditCollectionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditCollectionRequest := _EditCollectionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEditCollectionRequest)

	if err != nil {
		return err
	}

	*o = EditCollectionRequest(varEditCollectionRequest)

	return err
}

type NullableEditCollectionRequest struct {
	value *EditCollectionRequest
	isSet bool
}

func (v NullableEditCollectionRequest) Get() *EditCollectionRequest {
	return v.value
}

func (v *NullableEditCollectionRequest) Set(val *EditCollectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditCollectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditCollectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditCollectionRequest(val *EditCollectionRequest) *NullableEditCollectionRequest {
	return &NullableEditCollectionRequest{value: val, isSet: true}
}

func (v NullableEditCollectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditCollectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


