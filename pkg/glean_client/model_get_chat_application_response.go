/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the GetChatApplicationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetChatApplicationResponse{}

// GetChatApplicationResponse struct for GetChatApplicationResponse
type GetChatApplicationResponse struct {
	Application interface{} `json:"application,omitempty"`
}

// NewGetChatApplicationResponse instantiates a new GetChatApplicationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetChatApplicationResponse() *GetChatApplicationResponse {
	this := GetChatApplicationResponse{}
	return &this
}

// NewGetChatApplicationResponseWithDefaults instantiates a new GetChatApplicationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetChatApplicationResponseWithDefaults() *GetChatApplicationResponse {
	this := GetChatApplicationResponse{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetChatApplicationResponse) GetApplication() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetChatApplicationResponse) GetApplicationOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return &o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *GetChatApplicationResponse) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given interface{} and assigns it to the Application field.
func (o *GetChatApplicationResponse) SetApplication(v interface{}) {
	o.Application = v
}

func (o GetChatApplicationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetChatApplicationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Application != nil {
		toSerialize["application"] = o.Application
	}
	return toSerialize, nil
}

type NullableGetChatApplicationResponse struct {
	value *GetChatApplicationResponse
	isSet bool
}

func (v NullableGetChatApplicationResponse) Get() *GetChatApplicationResponse {
	return v.value
}

func (v *NullableGetChatApplicationResponse) Set(val *GetChatApplicationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetChatApplicationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetChatApplicationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetChatApplicationResponse(val *GetChatApplicationResponse) *NullableGetChatApplicationResponse {
	return &NullableGetChatApplicationResponse{value: val, isSet: true}
}

func (v NullableGetChatApplicationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetChatApplicationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


