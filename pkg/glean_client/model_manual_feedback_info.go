/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the ManualFeedbackInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManualFeedbackInfo{}

// ManualFeedbackInfo struct for ManualFeedbackInfo
type ManualFeedbackInfo struct {
	// The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
	Email *string `json:"email,omitempty"`
	// The source associated with the Feedback.event.MANUAL_FEEDBACK event.
	Source *string `json:"source,omitempty"`
	// The issue the user indicated in the feedback.
	Issue *string `json:"issue,omitempty"`
	// The query associated with the Feedback.event.MANUAL_FEEDBACK event.
	Query *string `json:"query,omitempty"`
	// The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
	ObscuredQuery *string `json:"obscuredQuery,omitempty"`
	// Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
	ActiveTab *string `json:"activeTab,omitempty"`
	// The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
	Comments *string `json:"comments,omitempty"`
	// The array of search result Glean Document IDs, ordered by top to bottom result.
	SearchResults []string `json:"searchResults,omitempty"`
	// The array of previous messages in a chat session, ordered by oldest to newest.
	PreviousMessages []string `json:"previousMessages,omitempty"`
	// How many times this query has been run in the past.
	NumQueriesFromFirstRun *int32 `json:"numQueriesFromFirstRun,omitempty"`
	// The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
	Vote *string `json:"vote,omitempty"`
	// A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
	Rating *int32 `json:"rating,omitempty"`
	// A description of the rating that contextualizes how it appeared to the user, e.g. \"satisfied\".
	RatingKey *string `json:"ratingKey,omitempty"`
	// The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
	RatingScale *int32 `json:"ratingScale,omitempty"`
}

// NewManualFeedbackInfo instantiates a new ManualFeedbackInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualFeedbackInfo() *ManualFeedbackInfo {
	this := ManualFeedbackInfo{}
	return &this
}

// NewManualFeedbackInfoWithDefaults instantiates a new ManualFeedbackInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualFeedbackInfoWithDefaults() *ManualFeedbackInfo {
	this := ManualFeedbackInfo{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ManualFeedbackInfo) SetEmail(v string) {
	o.Email = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ManualFeedbackInfo) SetSource(v string) {
	o.Source = &v
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetIssue() string {
	if o == nil || IsNil(o.Issue) {
		var ret string
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetIssueOk() (*string, bool) {
	if o == nil || IsNil(o.Issue) {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasIssue() bool {
	if o != nil && !IsNil(o.Issue) {
		return true
	}

	return false
}

// SetIssue gets a reference to the given string and assigns it to the Issue field.
func (o *ManualFeedbackInfo) SetIssue(v string) {
	o.Issue = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *ManualFeedbackInfo) SetQuery(v string) {
	o.Query = &v
}

// GetObscuredQuery returns the ObscuredQuery field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetObscuredQuery() string {
	if o == nil || IsNil(o.ObscuredQuery) {
		var ret string
		return ret
	}
	return *o.ObscuredQuery
}

// GetObscuredQueryOk returns a tuple with the ObscuredQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetObscuredQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ObscuredQuery) {
		return nil, false
	}
	return o.ObscuredQuery, true
}

// HasObscuredQuery returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasObscuredQuery() bool {
	if o != nil && !IsNil(o.ObscuredQuery) {
		return true
	}

	return false
}

// SetObscuredQuery gets a reference to the given string and assigns it to the ObscuredQuery field.
func (o *ManualFeedbackInfo) SetObscuredQuery(v string) {
	o.ObscuredQuery = &v
}

// GetActiveTab returns the ActiveTab field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetActiveTab() string {
	if o == nil || IsNil(o.ActiveTab) {
		var ret string
		return ret
	}
	return *o.ActiveTab
}

// GetActiveTabOk returns a tuple with the ActiveTab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetActiveTabOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveTab) {
		return nil, false
	}
	return o.ActiveTab, true
}

// HasActiveTab returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasActiveTab() bool {
	if o != nil && !IsNil(o.ActiveTab) {
		return true
	}

	return false
}

// SetActiveTab gets a reference to the given string and assigns it to the ActiveTab field.
func (o *ManualFeedbackInfo) SetActiveTab(v string) {
	o.ActiveTab = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *ManualFeedbackInfo) SetComments(v string) {
	o.Comments = &v
}

// GetSearchResults returns the SearchResults field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetSearchResults() []string {
	if o == nil || IsNil(o.SearchResults) {
		var ret []string
		return ret
	}
	return o.SearchResults
}

// GetSearchResultsOk returns a tuple with the SearchResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetSearchResultsOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchResults) {
		return nil, false
	}
	return o.SearchResults, true
}

// HasSearchResults returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasSearchResults() bool {
	if o != nil && !IsNil(o.SearchResults) {
		return true
	}

	return false
}

// SetSearchResults gets a reference to the given []string and assigns it to the SearchResults field.
func (o *ManualFeedbackInfo) SetSearchResults(v []string) {
	o.SearchResults = v
}

// GetPreviousMessages returns the PreviousMessages field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetPreviousMessages() []string {
	if o == nil || IsNil(o.PreviousMessages) {
		var ret []string
		return ret
	}
	return o.PreviousMessages
}

// GetPreviousMessagesOk returns a tuple with the PreviousMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetPreviousMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousMessages) {
		return nil, false
	}
	return o.PreviousMessages, true
}

// HasPreviousMessages returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasPreviousMessages() bool {
	if o != nil && !IsNil(o.PreviousMessages) {
		return true
	}

	return false
}

// SetPreviousMessages gets a reference to the given []string and assigns it to the PreviousMessages field.
func (o *ManualFeedbackInfo) SetPreviousMessages(v []string) {
	o.PreviousMessages = v
}

// GetNumQueriesFromFirstRun returns the NumQueriesFromFirstRun field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetNumQueriesFromFirstRun() int32 {
	if o == nil || IsNil(o.NumQueriesFromFirstRun) {
		var ret int32
		return ret
	}
	return *o.NumQueriesFromFirstRun
}

// GetNumQueriesFromFirstRunOk returns a tuple with the NumQueriesFromFirstRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetNumQueriesFromFirstRunOk() (*int32, bool) {
	if o == nil || IsNil(o.NumQueriesFromFirstRun) {
		return nil, false
	}
	return o.NumQueriesFromFirstRun, true
}

// HasNumQueriesFromFirstRun returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasNumQueriesFromFirstRun() bool {
	if o != nil && !IsNil(o.NumQueriesFromFirstRun) {
		return true
	}

	return false
}

// SetNumQueriesFromFirstRun gets a reference to the given int32 and assigns it to the NumQueriesFromFirstRun field.
func (o *ManualFeedbackInfo) SetNumQueriesFromFirstRun(v int32) {
	o.NumQueriesFromFirstRun = &v
}

// GetVote returns the Vote field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetVote() string {
	if o == nil || IsNil(o.Vote) {
		var ret string
		return ret
	}
	return *o.Vote
}

// GetVoteOk returns a tuple with the Vote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetVoteOk() (*string, bool) {
	if o == nil || IsNil(o.Vote) {
		return nil, false
	}
	return o.Vote, true
}

// HasVote returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasVote() bool {
	if o != nil && !IsNil(o.Vote) {
		return true
	}

	return false
}

// SetVote gets a reference to the given string and assigns it to the Vote field.
func (o *ManualFeedbackInfo) SetVote(v string) {
	o.Vote = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetRating() int32 {
	if o == nil || IsNil(o.Rating) {
		var ret int32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given int32 and assigns it to the Rating field.
func (o *ManualFeedbackInfo) SetRating(v int32) {
	o.Rating = &v
}

// GetRatingKey returns the RatingKey field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetRatingKey() string {
	if o == nil || IsNil(o.RatingKey) {
		var ret string
		return ret
	}
	return *o.RatingKey
}

// GetRatingKeyOk returns a tuple with the RatingKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetRatingKeyOk() (*string, bool) {
	if o == nil || IsNil(o.RatingKey) {
		return nil, false
	}
	return o.RatingKey, true
}

// HasRatingKey returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasRatingKey() bool {
	if o != nil && !IsNil(o.RatingKey) {
		return true
	}

	return false
}

// SetRatingKey gets a reference to the given string and assigns it to the RatingKey field.
func (o *ManualFeedbackInfo) SetRatingKey(v string) {
	o.RatingKey = &v
}

// GetRatingScale returns the RatingScale field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetRatingScale() int32 {
	if o == nil || IsNil(o.RatingScale) {
		var ret int32
		return ret
	}
	return *o.RatingScale
}

// GetRatingScaleOk returns a tuple with the RatingScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetRatingScaleOk() (*int32, bool) {
	if o == nil || IsNil(o.RatingScale) {
		return nil, false
	}
	return o.RatingScale, true
}

// HasRatingScale returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasRatingScale() bool {
	if o != nil && !IsNil(o.RatingScale) {
		return true
	}

	return false
}

// SetRatingScale gets a reference to the given int32 and assigns it to the RatingScale field.
func (o *ManualFeedbackInfo) SetRatingScale(v int32) {
	o.RatingScale = &v
}

func (o ManualFeedbackInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManualFeedbackInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Issue) {
		toSerialize["issue"] = o.Issue
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.ObscuredQuery) {
		toSerialize["obscuredQuery"] = o.ObscuredQuery
	}
	if !IsNil(o.ActiveTab) {
		toSerialize["activeTab"] = o.ActiveTab
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.SearchResults) {
		toSerialize["searchResults"] = o.SearchResults
	}
	if !IsNil(o.PreviousMessages) {
		toSerialize["previousMessages"] = o.PreviousMessages
	}
	if !IsNil(o.NumQueriesFromFirstRun) {
		toSerialize["numQueriesFromFirstRun"] = o.NumQueriesFromFirstRun
	}
	if !IsNil(o.Vote) {
		toSerialize["vote"] = o.Vote
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.RatingKey) {
		toSerialize["ratingKey"] = o.RatingKey
	}
	if !IsNil(o.RatingScale) {
		toSerialize["ratingScale"] = o.RatingScale
	}
	return toSerialize, nil
}

type NullableManualFeedbackInfo struct {
	value *ManualFeedbackInfo
	isSet bool
}

func (v NullableManualFeedbackInfo) Get() *ManualFeedbackInfo {
	return v.value
}

func (v *NullableManualFeedbackInfo) Set(val *ManualFeedbackInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableManualFeedbackInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableManualFeedbackInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualFeedbackInfo(val *ManualFeedbackInfo) *NullableManualFeedbackInfo {
	return &NullableManualFeedbackInfo{value: val, isSet: true}
}

func (v NullableManualFeedbackInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualFeedbackInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


