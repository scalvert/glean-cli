/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the DocumentSpecOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentSpecOneOf1{}

// DocumentSpecOneOf1 struct for DocumentSpecOneOf1
type DocumentSpecOneOf1 struct {
	// The ID of the document.
	Id *string `json:"id,omitempty"`
}

// NewDocumentSpecOneOf1 instantiates a new DocumentSpecOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSpecOneOf1() *DocumentSpecOneOf1 {
	this := DocumentSpecOneOf1{}
	return &this
}

// NewDocumentSpecOneOf1WithDefaults instantiates a new DocumentSpecOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSpecOneOf1WithDefaults() *DocumentSpecOneOf1 {
	this := DocumentSpecOneOf1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DocumentSpecOneOf1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSpecOneOf1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DocumentSpecOneOf1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DocumentSpecOneOf1) SetId(v string) {
	o.Id = &v
}

func (o DocumentSpecOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentSpecOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableDocumentSpecOneOf1 struct {
	value *DocumentSpecOneOf1
	isSet bool
}

func (v NullableDocumentSpecOneOf1) Get() *DocumentSpecOneOf1 {
	return v.value
}

func (v *NullableDocumentSpecOneOf1) Set(val *DocumentSpecOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSpecOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSpecOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSpecOneOf1(val *DocumentSpecOneOf1) *NullableDocumentSpecOneOf1 {
	return &NullableDocumentSpecOneOf1{value: val, isSet: true}
}

func (v NullableDocumentSpecOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSpecOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


