/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the RecommendationsRequestOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecommendationsRequestOptions{}

// RecommendationsRequestOptions struct for RecommendationsRequestOptions
type RecommendationsRequestOptions struct {
	// Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
	DatasourceFilter *string `json:"datasourceFilter,omitempty"`
	// Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
	DatasourcesFilter []string `json:"datasourcesFilter,omitempty"`
	Context *Document `json:"context,omitempty"`
	// The types of prominence wanted in results returned. Default is any type.
	ResultProminence []SearchResultProminenceEnum `json:"resultProminence,omitempty"`
}

// NewRecommendationsRequestOptions instantiates a new RecommendationsRequestOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecommendationsRequestOptions() *RecommendationsRequestOptions {
	this := RecommendationsRequestOptions{}
	return &this
}

// NewRecommendationsRequestOptionsWithDefaults instantiates a new RecommendationsRequestOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecommendationsRequestOptionsWithDefaults() *RecommendationsRequestOptions {
	this := RecommendationsRequestOptions{}
	return &this
}

// GetDatasourceFilter returns the DatasourceFilter field value if set, zero value otherwise.
func (o *RecommendationsRequestOptions) GetDatasourceFilter() string {
	if o == nil || IsNil(o.DatasourceFilter) {
		var ret string
		return ret
	}
	return *o.DatasourceFilter
}

// GetDatasourceFilterOk returns a tuple with the DatasourceFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationsRequestOptions) GetDatasourceFilterOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceFilter) {
		return nil, false
	}
	return o.DatasourceFilter, true
}

// HasDatasourceFilter returns a boolean if a field has been set.
func (o *RecommendationsRequestOptions) HasDatasourceFilter() bool {
	if o != nil && !IsNil(o.DatasourceFilter) {
		return true
	}

	return false
}

// SetDatasourceFilter gets a reference to the given string and assigns it to the DatasourceFilter field.
func (o *RecommendationsRequestOptions) SetDatasourceFilter(v string) {
	o.DatasourceFilter = &v
}

// GetDatasourcesFilter returns the DatasourcesFilter field value if set, zero value otherwise.
func (o *RecommendationsRequestOptions) GetDatasourcesFilter() []string {
	if o == nil || IsNil(o.DatasourcesFilter) {
		var ret []string
		return ret
	}
	return o.DatasourcesFilter
}

// GetDatasourcesFilterOk returns a tuple with the DatasourcesFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationsRequestOptions) GetDatasourcesFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.DatasourcesFilter) {
		return nil, false
	}
	return o.DatasourcesFilter, true
}

// HasDatasourcesFilter returns a boolean if a field has been set.
func (o *RecommendationsRequestOptions) HasDatasourcesFilter() bool {
	if o != nil && !IsNil(o.DatasourcesFilter) {
		return true
	}

	return false
}

// SetDatasourcesFilter gets a reference to the given []string and assigns it to the DatasourcesFilter field.
func (o *RecommendationsRequestOptions) SetDatasourcesFilter(v []string) {
	o.DatasourcesFilter = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *RecommendationsRequestOptions) GetContext() Document {
	if o == nil || IsNil(o.Context) {
		var ret Document
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationsRequestOptions) GetContextOk() (*Document, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *RecommendationsRequestOptions) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Document and assigns it to the Context field.
func (o *RecommendationsRequestOptions) SetContext(v Document) {
	o.Context = &v
}

// GetResultProminence returns the ResultProminence field value if set, zero value otherwise.
func (o *RecommendationsRequestOptions) GetResultProminence() []SearchResultProminenceEnum {
	if o == nil || IsNil(o.ResultProminence) {
		var ret []SearchResultProminenceEnum
		return ret
	}
	return o.ResultProminence
}

// GetResultProminenceOk returns a tuple with the ResultProminence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationsRequestOptions) GetResultProminenceOk() ([]SearchResultProminenceEnum, bool) {
	if o == nil || IsNil(o.ResultProminence) {
		return nil, false
	}
	return o.ResultProminence, true
}

// HasResultProminence returns a boolean if a field has been set.
func (o *RecommendationsRequestOptions) HasResultProminence() bool {
	if o != nil && !IsNil(o.ResultProminence) {
		return true
	}

	return false
}

// SetResultProminence gets a reference to the given []SearchResultProminenceEnum and assigns it to the ResultProminence field.
func (o *RecommendationsRequestOptions) SetResultProminence(v []SearchResultProminenceEnum) {
	o.ResultProminence = v
}

func (o RecommendationsRequestOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecommendationsRequestOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatasourceFilter) {
		toSerialize["datasourceFilter"] = o.DatasourceFilter
	}
	if !IsNil(o.DatasourcesFilter) {
		toSerialize["datasourcesFilter"] = o.DatasourcesFilter
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ResultProminence) {
		toSerialize["resultProminence"] = o.ResultProminence
	}
	return toSerialize, nil
}

type NullableRecommendationsRequestOptions struct {
	value *RecommendationsRequestOptions
	isSet bool
}

func (v NullableRecommendationsRequestOptions) Get() *RecommendationsRequestOptions {
	return v.value
}

func (v *NullableRecommendationsRequestOptions) Set(val *RecommendationsRequestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendationsRequestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendationsRequestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendationsRequestOptions(val *RecommendationsRequestOptions) *NullableRecommendationsRequestOptions {
	return &NullableRecommendationsRequestOptions{value: val, isSet: true}
}

func (v NullableRecommendationsRequestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendationsRequestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


