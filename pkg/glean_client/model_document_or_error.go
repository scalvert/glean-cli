/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// DocumentOrError - struct for DocumentOrError
type DocumentOrError struct {
	Document *Document
	DocumentOrErrorOneOf *DocumentOrErrorOneOf
}

// DocumentAsDocumentOrError is a convenience function that returns Document wrapped in DocumentOrError
func DocumentAsDocumentOrError(v *Document) DocumentOrError {
	return DocumentOrError{
		Document: v,
	}
}

// DocumentOrErrorOneOfAsDocumentOrError is a convenience function that returns DocumentOrErrorOneOf wrapped in DocumentOrError
func DocumentOrErrorOneOfAsDocumentOrError(v *DocumentOrErrorOneOf) DocumentOrError {
	return DocumentOrError{
		DocumentOrErrorOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DocumentOrError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Document
	err = newStrictDecoder(data).Decode(&dst.Document)
	if err == nil {
		jsonDocument, _ := json.Marshal(dst.Document)
		if string(jsonDocument) == "{}" { // empty struct
			dst.Document = nil
		} else {
			if err = validator.Validate(dst.Document); err != nil {
				dst.Document = nil
			} else {
				match++
			}
		}
	} else {
		dst.Document = nil
	}

	// try to unmarshal data into DocumentOrErrorOneOf
	err = newStrictDecoder(data).Decode(&dst.DocumentOrErrorOneOf)
	if err == nil {
		jsonDocumentOrErrorOneOf, _ := json.Marshal(dst.DocumentOrErrorOneOf)
		if string(jsonDocumentOrErrorOneOf) == "{}" { // empty struct
			dst.DocumentOrErrorOneOf = nil
		} else {
			if err = validator.Validate(dst.DocumentOrErrorOneOf); err != nil {
				dst.DocumentOrErrorOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentOrErrorOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Document = nil
		dst.DocumentOrErrorOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DocumentOrError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DocumentOrError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DocumentOrError) MarshalJSON() ([]byte, error) {
	if src.Document != nil {
		return json.Marshal(&src.Document)
	}

	if src.DocumentOrErrorOneOf != nil {
		return json.Marshal(&src.DocumentOrErrorOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DocumentOrError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Document != nil {
		return obj.Document
	}

	if obj.DocumentOrErrorOneOf != nil {
		return obj.DocumentOrErrorOneOf
	}

	// all schemas are nil
	return nil
}

type NullableDocumentOrError struct {
	value *DocumentOrError
	isSet bool
}

func (v NullableDocumentOrError) Get() *DocumentOrError {
	return v.value
}

func (v *NullableDocumentOrError) Set(val *DocumentOrError) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentOrError) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentOrError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentOrError(val *DocumentOrError) *NullableDocumentOrError {
	return &NullableDocumentOrError{value: val, isSet: true}
}

func (v NullableDocumentOrError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentOrError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


