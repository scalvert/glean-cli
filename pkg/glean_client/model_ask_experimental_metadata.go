/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the AskExperimentalMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AskExperimentalMetadata{}

// AskExperimentalMetadata struct for AskExperimentalMetadata
type AskExperimentalMetadata struct {
	// Whether or not the query (i.e. the slack message) has a mention.
	QueryHasMentions *bool `json:"QueryHasMentions,omitempty"`
	// Whether or not the query (i.e. the slack message) is length appropriate.
	QueryIsLengthAppropriate *bool `json:"QueryIsLengthAppropriate,omitempty"`
	// Whether or not the query (i.e. the slack message) has a question term.
	QueryIsAnswerable *bool `json:"QueryIsAnswerable,omitempty"`
}

// NewAskExperimentalMetadata instantiates a new AskExperimentalMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAskExperimentalMetadata() *AskExperimentalMetadata {
	this := AskExperimentalMetadata{}
	return &this
}

// NewAskExperimentalMetadataWithDefaults instantiates a new AskExperimentalMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAskExperimentalMetadataWithDefaults() *AskExperimentalMetadata {
	this := AskExperimentalMetadata{}
	return &this
}

// GetQueryHasMentions returns the QueryHasMentions field value if set, zero value otherwise.
func (o *AskExperimentalMetadata) GetQueryHasMentions() bool {
	if o == nil || IsNil(o.QueryHasMentions) {
		var ret bool
		return ret
	}
	return *o.QueryHasMentions
}

// GetQueryHasMentionsOk returns a tuple with the QueryHasMentions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskExperimentalMetadata) GetQueryHasMentionsOk() (*bool, bool) {
	if o == nil || IsNil(o.QueryHasMentions) {
		return nil, false
	}
	return o.QueryHasMentions, true
}

// HasQueryHasMentions returns a boolean if a field has been set.
func (o *AskExperimentalMetadata) HasQueryHasMentions() bool {
	if o != nil && !IsNil(o.QueryHasMentions) {
		return true
	}

	return false
}

// SetQueryHasMentions gets a reference to the given bool and assigns it to the QueryHasMentions field.
func (o *AskExperimentalMetadata) SetQueryHasMentions(v bool) {
	o.QueryHasMentions = &v
}

// GetQueryIsLengthAppropriate returns the QueryIsLengthAppropriate field value if set, zero value otherwise.
func (o *AskExperimentalMetadata) GetQueryIsLengthAppropriate() bool {
	if o == nil || IsNil(o.QueryIsLengthAppropriate) {
		var ret bool
		return ret
	}
	return *o.QueryIsLengthAppropriate
}

// GetQueryIsLengthAppropriateOk returns a tuple with the QueryIsLengthAppropriate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskExperimentalMetadata) GetQueryIsLengthAppropriateOk() (*bool, bool) {
	if o == nil || IsNil(o.QueryIsLengthAppropriate) {
		return nil, false
	}
	return o.QueryIsLengthAppropriate, true
}

// HasQueryIsLengthAppropriate returns a boolean if a field has been set.
func (o *AskExperimentalMetadata) HasQueryIsLengthAppropriate() bool {
	if o != nil && !IsNil(o.QueryIsLengthAppropriate) {
		return true
	}

	return false
}

// SetQueryIsLengthAppropriate gets a reference to the given bool and assigns it to the QueryIsLengthAppropriate field.
func (o *AskExperimentalMetadata) SetQueryIsLengthAppropriate(v bool) {
	o.QueryIsLengthAppropriate = &v
}

// GetQueryIsAnswerable returns the QueryIsAnswerable field value if set, zero value otherwise.
func (o *AskExperimentalMetadata) GetQueryIsAnswerable() bool {
	if o == nil || IsNil(o.QueryIsAnswerable) {
		var ret bool
		return ret
	}
	return *o.QueryIsAnswerable
}

// GetQueryIsAnswerableOk returns a tuple with the QueryIsAnswerable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskExperimentalMetadata) GetQueryIsAnswerableOk() (*bool, bool) {
	if o == nil || IsNil(o.QueryIsAnswerable) {
		return nil, false
	}
	return o.QueryIsAnswerable, true
}

// HasQueryIsAnswerable returns a boolean if a field has been set.
func (o *AskExperimentalMetadata) HasQueryIsAnswerable() bool {
	if o != nil && !IsNil(o.QueryIsAnswerable) {
		return true
	}

	return false
}

// SetQueryIsAnswerable gets a reference to the given bool and assigns it to the QueryIsAnswerable field.
func (o *AskExperimentalMetadata) SetQueryIsAnswerable(v bool) {
	o.QueryIsAnswerable = &v
}

func (o AskExperimentalMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AskExperimentalMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueryHasMentions) {
		toSerialize["QueryHasMentions"] = o.QueryHasMentions
	}
	if !IsNil(o.QueryIsLengthAppropriate) {
		toSerialize["QueryIsLengthAppropriate"] = o.QueryIsLengthAppropriate
	}
	if !IsNil(o.QueryIsAnswerable) {
		toSerialize["QueryIsAnswerable"] = o.QueryIsAnswerable
	}
	return toSerialize, nil
}

type NullableAskExperimentalMetadata struct {
	value *AskExperimentalMetadata
	isSet bool
}

func (v NullableAskExperimentalMetadata) Get() *AskExperimentalMetadata {
	return v.value
}

func (v *NullableAskExperimentalMetadata) Set(val *AskExperimentalMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAskExperimentalMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAskExperimentalMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAskExperimentalMetadata(val *AskExperimentalMetadata) *NullableAskExperimentalMetadata {
	return &NullableAskExperimentalMetadata{value: val, isSet: true}
}

func (v NullableAskExperimentalMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAskExperimentalMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


