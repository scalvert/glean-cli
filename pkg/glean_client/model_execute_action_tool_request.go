/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExecuteActionToolRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecuteActionToolRequest{}

// ExecuteActionToolRequest struct for ExecuteActionToolRequest
type ExecuteActionToolRequest struct {
	// The name of the tool.
	Name string `json:"name"`
	// The parameters to be passed to the tool for action.
	Parameters *map[string]WriteActionParameter `json:"parameters,omitempty"`
}

type _ExecuteActionToolRequest ExecuteActionToolRequest

// NewExecuteActionToolRequest instantiates a new ExecuteActionToolRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteActionToolRequest(name string) *ExecuteActionToolRequest {
	this := ExecuteActionToolRequest{}
	this.Name = name
	return &this
}

// NewExecuteActionToolRequestWithDefaults instantiates a new ExecuteActionToolRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteActionToolRequestWithDefaults() *ExecuteActionToolRequest {
	this := ExecuteActionToolRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ExecuteActionToolRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExecuteActionToolRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExecuteActionToolRequest) SetName(v string) {
	o.Name = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ExecuteActionToolRequest) GetParameters() map[string]WriteActionParameter {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]WriteActionParameter
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteActionToolRequest) GetParametersOk() (*map[string]WriteActionParameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ExecuteActionToolRequest) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]WriteActionParameter and assigns it to the Parameters field.
func (o *ExecuteActionToolRequest) SetParameters(v map[string]WriteActionParameter) {
	o.Parameters = &v
}

func (o ExecuteActionToolRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecuteActionToolRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *ExecuteActionToolRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecuteActionToolRequest := _ExecuteActionToolRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExecuteActionToolRequest)

	if err != nil {
		return err
	}

	*o = ExecuteActionToolRequest(varExecuteActionToolRequest)

	return err
}

type NullableExecuteActionToolRequest struct {
	value *ExecuteActionToolRequest
	isSet bool
}

func (v NullableExecuteActionToolRequest) Get() *ExecuteActionToolRequest {
	return v.value
}

func (v *NullableExecuteActionToolRequest) Set(val *ExecuteActionToolRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteActionToolRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteActionToolRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteActionToolRequest(val *ExecuteActionToolRequest) *NullableExecuteActionToolRequest {
	return &NullableExecuteActionToolRequest{value: val, isSet: true}
}

func (v NullableExecuteActionToolRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteActionToolRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


