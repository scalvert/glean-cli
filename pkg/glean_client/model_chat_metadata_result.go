/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the ChatMetadataResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatMetadataResult{}

// ChatMetadataResult struct for ChatMetadataResult
type ChatMetadataResult struct {
	Chat *ChatMetadata `json:"chat,omitempty"`
	// An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
}

// NewChatMetadataResult instantiates a new ChatMetadataResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMetadataResult() *ChatMetadataResult {
	this := ChatMetadataResult{}
	return &this
}

// NewChatMetadataResultWithDefaults instantiates a new ChatMetadataResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMetadataResultWithDefaults() *ChatMetadataResult {
	this := ChatMetadataResult{}
	return &this
}

// GetChat returns the Chat field value if set, zero value otherwise.
func (o *ChatMetadataResult) GetChat() ChatMetadata {
	if o == nil || IsNil(o.Chat) {
		var ret ChatMetadata
		return ret
	}
	return *o.Chat
}

// GetChatOk returns a tuple with the Chat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMetadataResult) GetChatOk() (*ChatMetadata, bool) {
	if o == nil || IsNil(o.Chat) {
		return nil, false
	}
	return o.Chat, true
}

// HasChat returns a boolean if a field has been set.
func (o *ChatMetadataResult) HasChat() bool {
	if o != nil && !IsNil(o.Chat) {
		return true
	}

	return false
}

// SetChat gets a reference to the given ChatMetadata and assigns it to the Chat field.
func (o *ChatMetadataResult) SetChat(v ChatMetadata) {
	o.Chat = &v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *ChatMetadataResult) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMetadataResult) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *ChatMetadataResult) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *ChatMetadataResult) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

func (o ChatMetadataResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatMetadataResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chat) {
		toSerialize["chat"] = o.Chat
	}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	return toSerialize, nil
}

type NullableChatMetadataResult struct {
	value *ChatMetadataResult
	isSet bool
}

func (v NullableChatMetadataResult) Get() *ChatMetadataResult {
	return v.value
}

func (v *NullableChatMetadataResult) Set(val *ChatMetadataResult) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMetadataResult) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMetadataResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMetadataResult(val *ChatMetadataResult) *NullableChatMetadataResult {
	return &NullableChatMetadataResult{value: val, isSet: true}
}

func (v NullableChatMetadataResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMetadataResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


