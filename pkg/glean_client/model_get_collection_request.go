/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetCollectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCollectionRequest{}

// GetCollectionRequest struct for GetCollectionRequest
type GetCollectionRequest struct {
	// The ID of the Collection to be retrieved.
	Id int32 `json:"id"`
	// Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
	WithItems *bool `json:"withItems,omitempty"`
	// Whether or not to include the top level Collection in this Collection's hierarchy.
	WithHierarchy *bool `json:"withHierarchy,omitempty"`
	// The datasource allowed in the Collection returned.
	AllowedDatasource *string `json:"allowedDatasource,omitempty"`
}

type _GetCollectionRequest GetCollectionRequest

// NewGetCollectionRequest instantiates a new GetCollectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCollectionRequest(id int32) *GetCollectionRequest {
	this := GetCollectionRequest{}
	this.Id = id
	return &this
}

// NewGetCollectionRequestWithDefaults instantiates a new GetCollectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCollectionRequestWithDefaults() *GetCollectionRequest {
	this := GetCollectionRequest{}
	return &this
}

// GetId returns the Id field value
func (o *GetCollectionRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetCollectionRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetCollectionRequest) SetId(v int32) {
	o.Id = v
}

// GetWithItems returns the WithItems field value if set, zero value otherwise.
func (o *GetCollectionRequest) GetWithItems() bool {
	if o == nil || IsNil(o.WithItems) {
		var ret bool
		return ret
	}
	return *o.WithItems
}

// GetWithItemsOk returns a tuple with the WithItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCollectionRequest) GetWithItemsOk() (*bool, bool) {
	if o == nil || IsNil(o.WithItems) {
		return nil, false
	}
	return o.WithItems, true
}

// HasWithItems returns a boolean if a field has been set.
func (o *GetCollectionRequest) HasWithItems() bool {
	if o != nil && !IsNil(o.WithItems) {
		return true
	}

	return false
}

// SetWithItems gets a reference to the given bool and assigns it to the WithItems field.
func (o *GetCollectionRequest) SetWithItems(v bool) {
	o.WithItems = &v
}

// GetWithHierarchy returns the WithHierarchy field value if set, zero value otherwise.
func (o *GetCollectionRequest) GetWithHierarchy() bool {
	if o == nil || IsNil(o.WithHierarchy) {
		var ret bool
		return ret
	}
	return *o.WithHierarchy
}

// GetWithHierarchyOk returns a tuple with the WithHierarchy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCollectionRequest) GetWithHierarchyOk() (*bool, bool) {
	if o == nil || IsNil(o.WithHierarchy) {
		return nil, false
	}
	return o.WithHierarchy, true
}

// HasWithHierarchy returns a boolean if a field has been set.
func (o *GetCollectionRequest) HasWithHierarchy() bool {
	if o != nil && !IsNil(o.WithHierarchy) {
		return true
	}

	return false
}

// SetWithHierarchy gets a reference to the given bool and assigns it to the WithHierarchy field.
func (o *GetCollectionRequest) SetWithHierarchy(v bool) {
	o.WithHierarchy = &v
}

// GetAllowedDatasource returns the AllowedDatasource field value if set, zero value otherwise.
func (o *GetCollectionRequest) GetAllowedDatasource() string {
	if o == nil || IsNil(o.AllowedDatasource) {
		var ret string
		return ret
	}
	return *o.AllowedDatasource
}

// GetAllowedDatasourceOk returns a tuple with the AllowedDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCollectionRequest) GetAllowedDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedDatasource) {
		return nil, false
	}
	return o.AllowedDatasource, true
}

// HasAllowedDatasource returns a boolean if a field has been set.
func (o *GetCollectionRequest) HasAllowedDatasource() bool {
	if o != nil && !IsNil(o.AllowedDatasource) {
		return true
	}

	return false
}

// SetAllowedDatasource gets a reference to the given string and assigns it to the AllowedDatasource field.
func (o *GetCollectionRequest) SetAllowedDatasource(v string) {
	o.AllowedDatasource = &v
}

func (o GetCollectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCollectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.WithItems) {
		toSerialize["withItems"] = o.WithItems
	}
	if !IsNil(o.WithHierarchy) {
		toSerialize["withHierarchy"] = o.WithHierarchy
	}
	if !IsNil(o.AllowedDatasource) {
		toSerialize["allowedDatasource"] = o.AllowedDatasource
	}
	return toSerialize, nil
}

func (o *GetCollectionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetCollectionRequest := _GetCollectionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetCollectionRequest)

	if err != nil {
		return err
	}

	*o = GetCollectionRequest(varGetCollectionRequest)

	return err
}

type NullableGetCollectionRequest struct {
	value *GetCollectionRequest
	isSet bool
}

func (v NullableGetCollectionRequest) Get() *GetCollectionRequest {
	return v.value
}

func (v *NullableGetCollectionRequest) Set(val *GetCollectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCollectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCollectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCollectionRequest(val *GetCollectionRequest) *NullableGetCollectionRequest {
	return &NullableGetCollectionRequest{value: val, isSet: true}
}

func (v NullableGetCollectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCollectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


