/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the CustomerMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerMetadata{}

// CustomerMetadata struct for CustomerMetadata
type CustomerMetadata struct {
	// The user visible id of the salesforce customer account.
	DatasourceId *string `json:"datasourceId,omitempty"`
	// Custom fields specific to individual datasources
	CustomData *map[string]CustomDataValue `json:"customData,omitempty"`
}

// NewCustomerMetadata instantiates a new CustomerMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerMetadata() *CustomerMetadata {
	this := CustomerMetadata{}
	return &this
}

// NewCustomerMetadataWithDefaults instantiates a new CustomerMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerMetadataWithDefaults() *CustomerMetadata {
	this := CustomerMetadata{}
	return &this
}

// GetDatasourceId returns the DatasourceId field value if set, zero value otherwise.
func (o *CustomerMetadata) GetDatasourceId() string {
	if o == nil || IsNil(o.DatasourceId) {
		var ret string
		return ret
	}
	return *o.DatasourceId
}

// GetDatasourceIdOk returns a tuple with the DatasourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerMetadata) GetDatasourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceId) {
		return nil, false
	}
	return o.DatasourceId, true
}

// HasDatasourceId returns a boolean if a field has been set.
func (o *CustomerMetadata) HasDatasourceId() bool {
	if o != nil && !IsNil(o.DatasourceId) {
		return true
	}

	return false
}

// SetDatasourceId gets a reference to the given string and assigns it to the DatasourceId field.
func (o *CustomerMetadata) SetDatasourceId(v string) {
	o.DatasourceId = &v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *CustomerMetadata) GetCustomData() map[string]CustomDataValue {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]CustomDataValue
		return ret
	}
	return *o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerMetadata) GetCustomDataOk() (*map[string]CustomDataValue, bool) {
	if o == nil || IsNil(o.CustomData) {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *CustomerMetadata) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]CustomDataValue and assigns it to the CustomData field.
func (o *CustomerMetadata) SetCustomData(v map[string]CustomDataValue) {
	o.CustomData = &v
}

func (o CustomerMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatasourceId) {
		toSerialize["datasourceId"] = o.DatasourceId
	}
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	return toSerialize, nil
}

type NullableCustomerMetadata struct {
	value *CustomerMetadata
	isSet bool
}

func (v NullableCustomerMetadata) Get() *CustomerMetadata {
	return v.value
}

func (v *NullableCustomerMetadata) Set(val *CustomerMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerMetadata(val *CustomerMetadata) *NullableCustomerMetadata {
	return &NullableCustomerMetadata{value: val, isSet: true}
}

func (v NullableCustomerMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


