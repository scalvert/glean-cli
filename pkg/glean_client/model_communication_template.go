/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"fmt"
)

// CommunicationTemplate The type of email to send
type CommunicationTemplate string

// List of CommunicationTemplate
const (
	ADMIN_ALERT CommunicationTemplate = "ADMIN_ALERT"
	ADMIN_INVITE CommunicationTemplate = "ADMIN_INVITE"
	ASSISTANT_ACCESS CommunicationTemplate = "ASSISTANT_ACCESS"
	AUTO_INVITE CommunicationTemplate = "AUTO_INVITE"
	CHAT_FEEDBACK CommunicationTemplate = "CHAT_FEEDBACK"
	CUSTOM_JSON_REPORT CommunicationTemplate = "CUSTOM_JSON_REPORT"
	DOMAIN_VERIFICATION CommunicationTemplate = "DOMAIN_VERIFICATION"
	GENERAL_FEEDBACK CommunicationTemplate = "GENERAL_FEEDBACK"
	INVITE_REMINDER CommunicationTemplate = "INVITE_REMINDER"
	MANAGER_INVITE CommunicationTemplate = "MANAGER_INVITE"
	ONBOARDING_CHAT CommunicationTemplate = "ONBOARDING_CHAT"
	ONBOARDING_INTRO CommunicationTemplate = "ONBOARDING_INTRO"
	ONBOARDING_EXPLORE CommunicationTemplate = "ONBOARDING_EXPLORE"
	ONBOARDING_EXPLORE_EXTENSION_PROMO CommunicationTemplate = "ONBOARDING_EXPLORE_EXTENSION_PROMO"
	ONBOARDING_TIPS CommunicationTemplate = "ONBOARDING_TIPS"
	ONBOARDING_TIPS_EXTENSION_PROMO CommunicationTemplate = "ONBOARDING_TIPS_EXTENSION_PROMO"
	ONBOARDING_SURVEY CommunicationTemplate = "ONBOARDING_SURVEY"
	RECRAWL_DATASOURCE CommunicationTemplate = "RECRAWL_DATASOURCE"
	SEARCH_FEEDBACK CommunicationTemplate = "SEARCH_FEEDBACK"
	TEAMMATE_INVITE CommunicationTemplate = "TEAMMATE_INVITE"
	VERIFICATION_REQUEST CommunicationTemplate = "VERIFICATION_REQUEST"
	VERIFICATION_REQUEST_NONUSER CommunicationTemplate = "VERIFICATION_REQUEST_NONUSER"
	WEEKLY_FEED CommunicationTemplate = "WEEKLY_FEED"
	WORKSPACE_INITIALIZED CommunicationTemplate = "WORKSPACE_INITIALIZED"
)

// All allowed values of CommunicationTemplate enum
var AllowedCommunicationTemplateEnumValues = []CommunicationTemplate{
	"ADMIN_ALERT",
	"ADMIN_INVITE",
	"ASSISTANT_ACCESS",
	"AUTO_INVITE",
	"CHAT_FEEDBACK",
	"CUSTOM_JSON_REPORT",
	"DOMAIN_VERIFICATION",
	"GENERAL_FEEDBACK",
	"INVITE_REMINDER",
	"MANAGER_INVITE",
	"ONBOARDING_CHAT",
	"ONBOARDING_INTRO",
	"ONBOARDING_EXPLORE",
	"ONBOARDING_EXPLORE_EXTENSION_PROMO",
	"ONBOARDING_TIPS",
	"ONBOARDING_TIPS_EXTENSION_PROMO",
	"ONBOARDING_SURVEY",
	"RECRAWL_DATASOURCE",
	"SEARCH_FEEDBACK",
	"TEAMMATE_INVITE",
	"VERIFICATION_REQUEST",
	"VERIFICATION_REQUEST_NONUSER",
	"WEEKLY_FEED",
	"WORKSPACE_INITIALIZED",
}

func (v *CommunicationTemplate) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommunicationTemplate(value)
	for _, existing := range AllowedCommunicationTemplateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommunicationTemplate", value)
}

// NewCommunicationTemplateFromValue returns a pointer to a valid CommunicationTemplate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommunicationTemplateFromValue(v string) (*CommunicationTemplate, error) {
	ev := CommunicationTemplate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommunicationTemplate: valid values are %v", v, AllowedCommunicationTemplateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommunicationTemplate) IsValid() bool {
	for _, existing := range AllowedCommunicationTemplateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommunicationTemplate value
func (v CommunicationTemplate) Ptr() *CommunicationTemplate {
	return &v
}

type NullableCommunicationTemplate struct {
	value *CommunicationTemplate
	isSet bool
}

func (v NullableCommunicationTemplate) Get() *CommunicationTemplate {
	return v.value
}

func (v *NullableCommunicationTemplate) Set(val *CommunicationTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationTemplate(val *CommunicationTemplate) *NullableCommunicationTemplate {
	return &NullableCommunicationTemplate{value: val, isSet: true}
}

func (v NullableCommunicationTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

