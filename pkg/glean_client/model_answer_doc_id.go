/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the AnswerDocId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerDocId{}

// AnswerDocId struct for AnswerDocId
type AnswerDocId struct {
	// Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
	DocId *string `json:"docId,omitempty"`
}

// NewAnswerDocId instantiates a new AnswerDocId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerDocId() *AnswerDocId {
	this := AnswerDocId{}
	return &this
}

// NewAnswerDocIdWithDefaults instantiates a new AnswerDocId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerDocIdWithDefaults() *AnswerDocId {
	this := AnswerDocId{}
	return &this
}

// GetDocId returns the DocId field value if set, zero value otherwise.
func (o *AnswerDocId) GetDocId() string {
	if o == nil || IsNil(o.DocId) {
		var ret string
		return ret
	}
	return *o.DocId
}

// GetDocIdOk returns a tuple with the DocId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerDocId) GetDocIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocId) {
		return nil, false
	}
	return o.DocId, true
}

// HasDocId returns a boolean if a field has been set.
func (o *AnswerDocId) HasDocId() bool {
	if o != nil && !IsNil(o.DocId) {
		return true
	}

	return false
}

// SetDocId gets a reference to the given string and assigns it to the DocId field.
func (o *AnswerDocId) SetDocId(v string) {
	o.DocId = &v
}

func (o AnswerDocId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerDocId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocId) {
		toSerialize["docId"] = o.DocId
	}
	return toSerialize, nil
}

type NullableAnswerDocId struct {
	value *AnswerDocId
	isSet bool
}

func (v NullableAnswerDocId) Get() *AnswerDocId {
	return v.value
}

func (v *NullableAnswerDocId) Set(val *AnswerDocId) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerDocId) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerDocId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerDocId(val *AnswerDocId) *NullableAnswerDocId {
	return &NullableAnswerDocId{value: val, isSet: true}
}

func (v NullableAnswerDocId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerDocId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


