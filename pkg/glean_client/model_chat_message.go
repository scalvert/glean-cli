/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
)

// checks if the ChatMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatMessage{}

// ChatMessage A message that is rendered as one coherent unit with one given sender.
type ChatMessage struct {
	AgentConfig *AgentConfig `json:"agentConfig,omitempty"`
	Author *string `json:"author,omitempty"`
	// A list of Citations used to generate the message.
	Citations []ChatMessageCitation `json:"citations,omitempty"`
	// A list of chat results.
	Fragments []ChatMessageFragment `json:"fragments,omitempty"`
	// Metadata associated with the message (not displayed to the user but stored in the app).
	Metadata *string `json:"metadata,omitempty"`
	// Timestamp of the message.
	Ts *string `json:"ts,omitempty"`
	// Unique ID of the message.
	MessageId *string `json:"messageId,omitempty"`
	// Opaque tracking token generated server-side.
	MessageTrackingToken *string `json:"messageTrackingToken,omitempty"`
	// Used to determine the type of UI treatment to apply to this message. UPDATE - intermediate state message for progress updates before content responses. CONTENT - contains content relevant to the user query. CONTEXT - contains additional context relevant to the user query. DEBUG - contains debug information of ChatBot behavior. ERROR - an error happened on server side.
	MessageType *string `json:"messageType,omitempty"`
	// Signals there are more fragments incoming.
	HasMoreFragments *bool `json:"hasMoreFragments,omitempty"`
}

// NewChatMessage instantiates a new ChatMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMessage() *ChatMessage {
	this := ChatMessage{}
	var author string = "USER"
	this.Author = &author
	return &this
}

// NewChatMessageWithDefaults instantiates a new ChatMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMessageWithDefaults() *ChatMessage {
	this := ChatMessage{}
	var author string = "USER"
	this.Author = &author
	return &this
}

// GetAgentConfig returns the AgentConfig field value if set, zero value otherwise.
func (o *ChatMessage) GetAgentConfig() AgentConfig {
	if o == nil || IsNil(o.AgentConfig) {
		var ret AgentConfig
		return ret
	}
	return *o.AgentConfig
}

// GetAgentConfigOk returns a tuple with the AgentConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetAgentConfigOk() (*AgentConfig, bool) {
	if o == nil || IsNil(o.AgentConfig) {
		return nil, false
	}
	return o.AgentConfig, true
}

// HasAgentConfig returns a boolean if a field has been set.
func (o *ChatMessage) HasAgentConfig() bool {
	if o != nil && !IsNil(o.AgentConfig) {
		return true
	}

	return false
}

// SetAgentConfig gets a reference to the given AgentConfig and assigns it to the AgentConfig field.
func (o *ChatMessage) SetAgentConfig(v AgentConfig) {
	o.AgentConfig = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ChatMessage) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ChatMessage) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *ChatMessage) SetAuthor(v string) {
	o.Author = &v
}

// GetCitations returns the Citations field value if set, zero value otherwise.
func (o *ChatMessage) GetCitations() []ChatMessageCitation {
	if o == nil || IsNil(o.Citations) {
		var ret []ChatMessageCitation
		return ret
	}
	return o.Citations
}

// GetCitationsOk returns a tuple with the Citations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetCitationsOk() ([]ChatMessageCitation, bool) {
	if o == nil || IsNil(o.Citations) {
		return nil, false
	}
	return o.Citations, true
}

// HasCitations returns a boolean if a field has been set.
func (o *ChatMessage) HasCitations() bool {
	if o != nil && !IsNil(o.Citations) {
		return true
	}

	return false
}

// SetCitations gets a reference to the given []ChatMessageCitation and assigns it to the Citations field.
func (o *ChatMessage) SetCitations(v []ChatMessageCitation) {
	o.Citations = v
}

// GetFragments returns the Fragments field value if set, zero value otherwise.
func (o *ChatMessage) GetFragments() []ChatMessageFragment {
	if o == nil || IsNil(o.Fragments) {
		var ret []ChatMessageFragment
		return ret
	}
	return o.Fragments
}

// GetFragmentsOk returns a tuple with the Fragments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetFragmentsOk() ([]ChatMessageFragment, bool) {
	if o == nil || IsNil(o.Fragments) {
		return nil, false
	}
	return o.Fragments, true
}

// HasFragments returns a boolean if a field has been set.
func (o *ChatMessage) HasFragments() bool {
	if o != nil && !IsNil(o.Fragments) {
		return true
	}

	return false
}

// SetFragments gets a reference to the given []ChatMessageFragment and assigns it to the Fragments field.
func (o *ChatMessage) SetFragments(v []ChatMessageFragment) {
	o.Fragments = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ChatMessage) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ChatMessage) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *ChatMessage) SetMetadata(v string) {
	o.Metadata = &v
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *ChatMessage) GetTs() string {
	if o == nil || IsNil(o.Ts) {
		var ret string
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetTsOk() (*string, bool) {
	if o == nil || IsNil(o.Ts) {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *ChatMessage) HasTs() bool {
	if o != nil && !IsNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given string and assigns it to the Ts field.
func (o *ChatMessage) SetTs(v string) {
	o.Ts = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *ChatMessage) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *ChatMessage) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *ChatMessage) SetMessageId(v string) {
	o.MessageId = &v
}

// GetMessageTrackingToken returns the MessageTrackingToken field value if set, zero value otherwise.
func (o *ChatMessage) GetMessageTrackingToken() string {
	if o == nil || IsNil(o.MessageTrackingToken) {
		var ret string
		return ret
	}
	return *o.MessageTrackingToken
}

// GetMessageTrackingTokenOk returns a tuple with the MessageTrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetMessageTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.MessageTrackingToken) {
		return nil, false
	}
	return o.MessageTrackingToken, true
}

// HasMessageTrackingToken returns a boolean if a field has been set.
func (o *ChatMessage) HasMessageTrackingToken() bool {
	if o != nil && !IsNil(o.MessageTrackingToken) {
		return true
	}

	return false
}

// SetMessageTrackingToken gets a reference to the given string and assigns it to the MessageTrackingToken field.
func (o *ChatMessage) SetMessageTrackingToken(v string) {
	o.MessageTrackingToken = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *ChatMessage) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *ChatMessage) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *ChatMessage) SetMessageType(v string) {
	o.MessageType = &v
}

// GetHasMoreFragments returns the HasMoreFragments field value if set, zero value otherwise.
func (o *ChatMessage) GetHasMoreFragments() bool {
	if o == nil || IsNil(o.HasMoreFragments) {
		var ret bool
		return ret
	}
	return *o.HasMoreFragments
}

// GetHasMoreFragmentsOk returns a tuple with the HasMoreFragments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetHasMoreFragmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMoreFragments) {
		return nil, false
	}
	return o.HasMoreFragments, true
}

// HasHasMoreFragments returns a boolean if a field has been set.
func (o *ChatMessage) HasHasMoreFragments() bool {
	if o != nil && !IsNil(o.HasMoreFragments) {
		return true
	}

	return false
}

// SetHasMoreFragments gets a reference to the given bool and assigns it to the HasMoreFragments field.
func (o *ChatMessage) SetHasMoreFragments(v bool) {
	o.HasMoreFragments = &v
}

func (o ChatMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AgentConfig) {
		toSerialize["agentConfig"] = o.AgentConfig
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Citations) {
		toSerialize["citations"] = o.Citations
	}
	if !IsNil(o.Fragments) {
		toSerialize["fragments"] = o.Fragments
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Ts) {
		toSerialize["ts"] = o.Ts
	}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.MessageTrackingToken) {
		toSerialize["messageTrackingToken"] = o.MessageTrackingToken
	}
	if !IsNil(o.MessageType) {
		toSerialize["messageType"] = o.MessageType
	}
	if !IsNil(o.HasMoreFragments) {
		toSerialize["hasMoreFragments"] = o.HasMoreFragments
	}
	return toSerialize, nil
}

type NullableChatMessage struct {
	value *ChatMessage
	isSet bool
}

func (v NullableChatMessage) Get() *ChatMessage {
	return v.value
}

func (v *NullableChatMessage) Set(val *ChatMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMessage(val *ChatMessage) *NullableChatMessage {
	return &NullableChatMessage{value: val, isSet: true}
}

func (v NullableChatMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


