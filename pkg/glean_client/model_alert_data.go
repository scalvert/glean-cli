/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"time"
)

// checks if the AlertData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertData{}

// AlertData Admin alert related information that is used to construct the admin alert email
type AlertData struct {
	// The name of the admin alert
	Name *string `json:"name,omitempty"`
	// The time that the alert was triggered
	TriggeredTime *time.Time `json:"triggeredTime,omitempty"`
	// Human readable name of the project instance
	ProjectName *string `json:"projectName,omitempty"`
	// Help link for the alert that the admin can reference
	HelpLink *string `json:"helpLink,omitempty"`
	// Datasource that the alert is related to (possibly null)
	Datasource *string `json:"datasource,omitempty"`
}

// NewAlertData instantiates a new AlertData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertData() *AlertData {
	this := AlertData{}
	return &this
}

// NewAlertDataWithDefaults instantiates a new AlertData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertDataWithDefaults() *AlertData {
	this := AlertData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertData) SetName(v string) {
	o.Name = &v
}

// GetTriggeredTime returns the TriggeredTime field value if set, zero value otherwise.
func (o *AlertData) GetTriggeredTime() time.Time {
	if o == nil || IsNil(o.TriggeredTime) {
		var ret time.Time
		return ret
	}
	return *o.TriggeredTime
}

// GetTriggeredTimeOk returns a tuple with the TriggeredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertData) GetTriggeredTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TriggeredTime) {
		return nil, false
	}
	return o.TriggeredTime, true
}

// HasTriggeredTime returns a boolean if a field has been set.
func (o *AlertData) HasTriggeredTime() bool {
	if o != nil && !IsNil(o.TriggeredTime) {
		return true
	}

	return false
}

// SetTriggeredTime gets a reference to the given time.Time and assigns it to the TriggeredTime field.
func (o *AlertData) SetTriggeredTime(v time.Time) {
	o.TriggeredTime = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *AlertData) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertData) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *AlertData) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *AlertData) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetHelpLink returns the HelpLink field value if set, zero value otherwise.
func (o *AlertData) GetHelpLink() string {
	if o == nil || IsNil(o.HelpLink) {
		var ret string
		return ret
	}
	return *o.HelpLink
}

// GetHelpLinkOk returns a tuple with the HelpLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertData) GetHelpLinkOk() (*string, bool) {
	if o == nil || IsNil(o.HelpLink) {
		return nil, false
	}
	return o.HelpLink, true
}

// HasHelpLink returns a boolean if a field has been set.
func (o *AlertData) HasHelpLink() bool {
	if o != nil && !IsNil(o.HelpLink) {
		return true
	}

	return false
}

// SetHelpLink gets a reference to the given string and assigns it to the HelpLink field.
func (o *AlertData) SetHelpLink(v string) {
	o.HelpLink = &v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *AlertData) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertData) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *AlertData) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *AlertData) SetDatasource(v string) {
	o.Datasource = &v
}

func (o AlertData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TriggeredTime) {
		toSerialize["triggeredTime"] = o.TriggeredTime
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	if !IsNil(o.HelpLink) {
		toSerialize["helpLink"] = o.HelpLink
	}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	return toSerialize, nil
}

type NullableAlertData struct {
	value *AlertData
	isSet bool
}

func (v NullableAlertData) Get() *AlertData {
	return v.value
}

func (v *NullableAlertData) Set(val *AlertData) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertData) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertData(val *AlertData) *NullableAlertData {
	return &NullableAlertData{value: val, isSet: true}
}

func (v NullableAlertData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


