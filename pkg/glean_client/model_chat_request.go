/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package glean_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatRequest{}

// ChatRequest struct for ChatRequest
type ChatRequest struct {
	// Save the current interaction as a Chat for the user to access later.
	SaveChat *bool `json:"saveChat,omitempty"`
	// The id of the Chat that this message should be added to. An empty id signifies creating a new Chat if saveChat is true.
	ChatId *string `json:"chatId,omitempty"`
	// A list of chat messages, from most recent to least recent. It can be assumed that the first chat message in the list is the user's most recent query.
	Messages []ChatMessage `json:"messages"`
	AgentConfig *AgentConfig `json:"agentConfig,omitempty"`
	Inclusions *RestrictionFilters `json:"inclusions,omitempty"`
	Exclusions *RestrictionFilters `json:"exclusions,omitempty"`
	// Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
	TimeoutMillis *int32 `json:"timeoutMillis,omitempty"`
	// The ID of the application this request originates from, used to determine the configuration of underlying chat processes. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
	ApplicationId *string `json:"applicationId,omitempty"`
	// Whether to stream responses as they become available. If false, the entire response will be returned at once. Note if true and the model being used does not support streaming, the model's response will not be streamed but other messages from the endpoint still will.
	Stream *bool `json:"stream,omitempty"`
}

type _ChatRequest ChatRequest

// NewChatRequest instantiates a new ChatRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatRequest(messages []ChatMessage) *ChatRequest {
	this := ChatRequest{}
	this.Messages = messages
	return &this
}

// NewChatRequestWithDefaults instantiates a new ChatRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatRequestWithDefaults() *ChatRequest {
	this := ChatRequest{}
	return &this
}

// GetSaveChat returns the SaveChat field value if set, zero value otherwise.
func (o *ChatRequest) GetSaveChat() bool {
	if o == nil || IsNil(o.SaveChat) {
		var ret bool
		return ret
	}
	return *o.SaveChat
}

// GetSaveChatOk returns a tuple with the SaveChat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetSaveChatOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveChat) {
		return nil, false
	}
	return o.SaveChat, true
}

// HasSaveChat returns a boolean if a field has been set.
func (o *ChatRequest) HasSaveChat() bool {
	if o != nil && !IsNil(o.SaveChat) {
		return true
	}

	return false
}

// SetSaveChat gets a reference to the given bool and assigns it to the SaveChat field.
func (o *ChatRequest) SetSaveChat(v bool) {
	o.SaveChat = &v
}

// GetChatId returns the ChatId field value if set, zero value otherwise.
func (o *ChatRequest) GetChatId() string {
	if o == nil || IsNil(o.ChatId) {
		var ret string
		return ret
	}
	return *o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetChatIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChatId) {
		return nil, false
	}
	return o.ChatId, true
}

// HasChatId returns a boolean if a field has been set.
func (o *ChatRequest) HasChatId() bool {
	if o != nil && !IsNil(o.ChatId) {
		return true
	}

	return false
}

// SetChatId gets a reference to the given string and assigns it to the ChatId field.
func (o *ChatRequest) SetChatId(v string) {
	o.ChatId = &v
}

// GetMessages returns the Messages field value
func (o *ChatRequest) GetMessages() []ChatMessage {
	if o == nil {
		var ret []ChatMessage
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetMessagesOk() ([]ChatMessage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *ChatRequest) SetMessages(v []ChatMessage) {
	o.Messages = v
}

// GetAgentConfig returns the AgentConfig field value if set, zero value otherwise.
func (o *ChatRequest) GetAgentConfig() AgentConfig {
	if o == nil || IsNil(o.AgentConfig) {
		var ret AgentConfig
		return ret
	}
	return *o.AgentConfig
}

// GetAgentConfigOk returns a tuple with the AgentConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetAgentConfigOk() (*AgentConfig, bool) {
	if o == nil || IsNil(o.AgentConfig) {
		return nil, false
	}
	return o.AgentConfig, true
}

// HasAgentConfig returns a boolean if a field has been set.
func (o *ChatRequest) HasAgentConfig() bool {
	if o != nil && !IsNil(o.AgentConfig) {
		return true
	}

	return false
}

// SetAgentConfig gets a reference to the given AgentConfig and assigns it to the AgentConfig field.
func (o *ChatRequest) SetAgentConfig(v AgentConfig) {
	o.AgentConfig = &v
}

// GetInclusions returns the Inclusions field value if set, zero value otherwise.
func (o *ChatRequest) GetInclusions() RestrictionFilters {
	if o == nil || IsNil(o.Inclusions) {
		var ret RestrictionFilters
		return ret
	}
	return *o.Inclusions
}

// GetInclusionsOk returns a tuple with the Inclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetInclusionsOk() (*RestrictionFilters, bool) {
	if o == nil || IsNil(o.Inclusions) {
		return nil, false
	}
	return o.Inclusions, true
}

// HasInclusions returns a boolean if a field has been set.
func (o *ChatRequest) HasInclusions() bool {
	if o != nil && !IsNil(o.Inclusions) {
		return true
	}

	return false
}

// SetInclusions gets a reference to the given RestrictionFilters and assigns it to the Inclusions field.
func (o *ChatRequest) SetInclusions(v RestrictionFilters) {
	o.Inclusions = &v
}

// GetExclusions returns the Exclusions field value if set, zero value otherwise.
func (o *ChatRequest) GetExclusions() RestrictionFilters {
	if o == nil || IsNil(o.Exclusions) {
		var ret RestrictionFilters
		return ret
	}
	return *o.Exclusions
}

// GetExclusionsOk returns a tuple with the Exclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetExclusionsOk() (*RestrictionFilters, bool) {
	if o == nil || IsNil(o.Exclusions) {
		return nil, false
	}
	return o.Exclusions, true
}

// HasExclusions returns a boolean if a field has been set.
func (o *ChatRequest) HasExclusions() bool {
	if o != nil && !IsNil(o.Exclusions) {
		return true
	}

	return false
}

// SetExclusions gets a reference to the given RestrictionFilters and assigns it to the Exclusions field.
func (o *ChatRequest) SetExclusions(v RestrictionFilters) {
	o.Exclusions = &v
}

// GetTimeoutMillis returns the TimeoutMillis field value if set, zero value otherwise.
func (o *ChatRequest) GetTimeoutMillis() int32 {
	if o == nil || IsNil(o.TimeoutMillis) {
		var ret int32
		return ret
	}
	return *o.TimeoutMillis
}

// GetTimeoutMillisOk returns a tuple with the TimeoutMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetTimeoutMillisOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutMillis) {
		return nil, false
	}
	return o.TimeoutMillis, true
}

// HasTimeoutMillis returns a boolean if a field has been set.
func (o *ChatRequest) HasTimeoutMillis() bool {
	if o != nil && !IsNil(o.TimeoutMillis) {
		return true
	}

	return false
}

// SetTimeoutMillis gets a reference to the given int32 and assigns it to the TimeoutMillis field.
func (o *ChatRequest) SetTimeoutMillis(v int32) {
	o.TimeoutMillis = &v
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *ChatRequest) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *ChatRequest) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *ChatRequest) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *ChatRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *ChatRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *ChatRequest) SetStream(v bool) {
	o.Stream = &v
}

func (o ChatRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SaveChat) {
		toSerialize["saveChat"] = o.SaveChat
	}
	if !IsNil(o.ChatId) {
		toSerialize["chatId"] = o.ChatId
	}
	toSerialize["messages"] = o.Messages
	if !IsNil(o.AgentConfig) {
		toSerialize["agentConfig"] = o.AgentConfig
	}
	if !IsNil(o.Inclusions) {
		toSerialize["inclusions"] = o.Inclusions
	}
	if !IsNil(o.Exclusions) {
		toSerialize["exclusions"] = o.Exclusions
	}
	if !IsNil(o.TimeoutMillis) {
		toSerialize["timeoutMillis"] = o.TimeoutMillis
	}
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	return toSerialize, nil
}

func (o *ChatRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatRequest := _ChatRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatRequest)

	if err != nil {
		return err
	}

	*o = ChatRequest(varChatRequest)

	return err
}

type NullableChatRequest struct {
	value *ChatRequest
	isSet bool
}

func (v NullableChatRequest) Get() *ChatRequest {
	return v.value
}

func (v *NullableChatRequest) Set(val *ChatRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChatRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChatRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatRequest(val *ChatRequest) *NullableChatRequest {
	return &NullableChatRequest{value: val, isSet: true}
}

func (v NullableChatRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


